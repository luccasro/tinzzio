{"version":3,"sources":["hooks/useColorScheme.ts","src/navigation/LinkingConfiguration.ts","src/config.tsx","src/services/index.tsx","src/screens/Login/LoginPage.tsx","src/styles/index.tsx","src/screens/Rooms/LoadRoom.tsx","src/screens/shared/cardItem/index.tsx","src/screens/shared/menuOptions/index.tsx","src/screens/Homepage/Dashboard.tsx","src/screens/Homepage/Home.tsx","src/screens/Rooms/Room.tsx","src/screens/Rooms/UserRooms.tsx","src/screens/Users/Users.tsx","src/screens/Users/Settings.tsx","src/screens/Explore/Explore.tsx","src/screens/NotFoundScreen.tsx","src/screens/Rooms/CreateRoom.tsx","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","src/screens/ModalScreen.tsx","src/screens/Admin/Category.tsx","src/screens/Admin/AdminHome.tsx","src/screens/Rooms/WordRoom.tsx","src/screens/Reports/ReportsHome.tsx","src/navigation/index.tsx","i18n/i18n.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","src/assets/fonts/Amiko-Regular.ttf"],"names":["useColorScheme","_useColorScheme","linking","prefixes","Linking","config","screens","Home","Dashboard","CreateRoom","Login","Room","path","parse","roomId","stringify","replace","Users","userName","Settings","UserRooms","Explore","Reports","Admin","Word","Modal","NotFound","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","getAuth","db","getFirestore","getUserData","userId","a","async","currentUser","uid","docRef","doc","getDoc","data","checkIfLoggedIn","afterSuccess","afterFailed","navigation","onAuthStateChanged","user","navigate","logout","signOut","then","catch","error","console","log","getIconType","iconType","type","undefined","MaterialCommunityIcons","AntDesign","LoginPage","theme","useTheme","useNavigation","toggleColorMode","useColorMode","useState","loadLogin","setLoadLogin","androidClientId","androidStandaloneAppClientId","scopes","useEffect","onSignIn","googleUser","unsubscribe","credential","GoogleAuthProvider","idToken","accessToken","signInWithCredential","result","exists","setDoc","id","name","displayName","email","created_at","Date","toLocaleString","photoUrl","photoURL","notifications","text","createdAt","read","generateUserDocument","errorCode","code","errorMessage","message","loginWeb","googleProvider","signInWithPopup","credentialFromResult","_contentContainerStyle","height","_light","bg","colors","white","_dark","black","h","direction","w","alignItems","justifyContent","color","size","pb","variant","leftIcon","onPress","Platform","OS","Google","my","colorScheme","isDisabled","breakpoints","mediaQueries","createContext","isSmall","isSmallMedium","isMedium","isMediumLarge","isLarge","small","smallMedium","medium","mediumLarge","large","getMediaQuery","useMediaQuery","maxWidth","value","LoadRoom","setRoomId","mb","py","style","alignSelf","position","top","rounded","p","borderColor","borderWidth","backgroundColor","_web","shadow","cursor","bold","i18next","t","minWidth","placeholder","mt","onChangeText","CardItem","room","ownerId","background","setBackground","getRandomColor","i","Math","floor","random","isHovered","isFocused","isPressed","minW","minHeight","overflow","transform","scale","ratio","owner","right","trigger","triggerProps","icon","as","MaterialIcons","Item","updateDoc","disabled","rooms","deleteDoc","arrayRemove","_text","fontWeight","fontSize","bottom","px","space","ml","questions","length","toString","split","MenuOptions","setUser","onSnapshot","flexDirection","onClose","filter","it","tempNotifications","indexes","ref","forEach","index","push","map","val","readAllNotifications","mr","zIndex","coolGray","borderRadius","_hover","_pressed","notification","pr","width","changeLanguage","lng","AsyncStorage","setItem","FontAwesome5","_icon","FontAwesome","selectable","purple","pl","useColorModeValue","Trans","i18nKey","red","useIsFocused","setRooms","loadRoom","collection","q","query","where","limit","getDocs","querySnapshot","tempRoom","contentContainerStyle","flexGrow","in","marginHorizontal","columns","spacingX","spacingY","mx","key","toast","useToast","loadToast","setLoadToast","route","useRoute","showToast","isActive","show","render","flex","setRoom","roomExists","setRoomExists","params","userLoggedId","setUserLoggedId","answeredQuestion","setAnsweredQuestion","currentIndex","setCurrentIndex","finished","setFinished","isStarted","setIsStarted","resetRoom","docSnap","getRoom","participants","userIndex","findIndex","answers","goBack","checkQuestion","option","values","correctOption","isCorrect","sendQuestions","updateParticipant","arrayUnion","marginVertical","question","status","flexShrink","Icon","flexWrap","b","c","d","Clipboard","Object","setUserLogged","userExists","setUserExists","getUserNameData","marginBottom","source","uri","match","join","setUserName","userNameAvailable","setUserNameAvailable","checkUserName","username","toLowerCase","refUsers","oldUserName","updateUserName","NotFoundScreen","roomName","setRoomName","setQuestions","roomPrivacy","setRoomPrivacy","showSettings","setShowSettings","user2","onChangeInput","newValue","input","Ionicons","splice","removeQuestion","newQuestion","oldQuestions","some","addDoc","privacy","isOpen","Content","CloseButton","Header","Body","label","Footer","Group","light","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","Text","lightColor","darkColor","otherProps","View","MonoText","fontFamily","EditScreenInfo","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","paddingHorizontal","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","CategoryAdmin","category","setCategory","translation_en","setTranslation_en","translation_pt","setTranslation_pt","setIcon","setIconType","categoryList","setCategoryList","loadCategories","tempCategories","selectedValue","accessibilityLabel","onValueChange","itemValue","alert","addCategory","AdminHome","isAdmin","setIsAdmin","admin","WordRoom","posX","setPosX","posY","setPosY","word","words","setWords","isFinished","setIsCorrect","userCorrectPos","setUserCorrectPos","usedLetters","setUsedLetters","currentWord","setCurrentWord","loadWord","onChangeWord","index2","force","Key","keyVal","setKey","wordsValues","letters","isPresent","j","includes","checkLetters","every","e","submitWord","getKeyBg","Feather","val2","m","pt","textTransform","ReportsHome","Navigation","React","setLoad","useFonts","Amiko","require","colorModeManager","NavigationContainer","LinkingConfiguration","themeNavigationDefault","Tab","Navigator","initialRouteName","tabBar","screenOptions","tabBarHideOnKeyboard","headerStyle","borderBottomWidth","headerTitleStyle","headerTitle","headerRight","Stack","Screen","component","options","headerShown","presentation","TabBar","state","descriptors","currentRoute","routes","left","tabBarLabel","accessibilityRole","tabBarAccessibilityLabel","testID","tabBarTestID","onLongPress","emit","target","opacity","createBottomTabNavigator","extendTheme","fonts","heading","body","mono","components","Button","variants","default","_focus","baseStyle","ScrollView","themeTools","mode","Input","defaultProps","modalHeader","colorMode","MenuItem","Menu","primary","50","100","200","300","400","500","600","700","800","900","get","getItem","set","DarkTheme","DefaultTheme","createNativeStackNavigator","createDrawerNavigator","storedLanguage","i18n","phoneLanguage","NativeModules","I18Manager","localeIdentifier","SettingsManager","settings","AppleLocale","navigator","language","languageDetector","use","initReactI18next","init","resources","en","translations","Translations","ptBR","fallbackLng","debug","ns","defaultNS","compatibilityJSON","interpolation","escapeValue","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.db8ee47c.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\r\n\r\n// The useColorScheme value is always either light or dark, but the built-in\r\n// type suggests that it can be null. This will not happen in practice, so this\r\n// makes it a bit easier to work with.\r\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\r\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\r\n}\r\n","/**\r\n * Learn more about deep linking with React Navigation\r\n * https://reactnavigation.org/docs/deep-linking\r\n * https://reactnavigation.org/docs/configuring-links\r\n */\r\n\r\nimport { LinkingOptions } from '@react-navigation/native';\r\nimport * as Linking from 'expo-linking';\r\nimport { RootStackParamList } from '../../types';\r\n\r\nconst linking: LinkingOptions<RootStackParamList | any> = {\r\n  prefixes: [Linking.makeUrl('/')],\r\n  config: {\r\n    screens: {\r\n      Home: '',\r\n      Dashboard: 'dashboard',\r\n      CreateRoom: 'create',\r\n      Login: 'login',\r\n      Room: {\r\n        path: 'rooms/:roomId',\r\n        parse: {\r\n          roomId: (roomId) => `room-${roomId}`,\r\n        },\r\n        stringify: {\r\n          roomId: (roomId) => roomId.replace(/^room-/, '')\r\n        },\r\n      },\r\n      Users: {\r\n        path: 'users/:userName',\r\n        parse: {\r\n          userName: (userName) => `${userName}`,\r\n        }\r\n      },\r\n      Settings: 'settings',\r\n      UserRooms: 'library',\r\n      Explore: \"explore\",\r\n      Reports: \"reports\",\r\n      Admin: \"admin\",\r\n      Word: \"word\",\r\n      Modal: 'modal',\r\n      NotFound: '*',\r\n      Root: {\r\n        screens: {\r\n          TabOne: {\r\n            screens: {\r\n              TabOneScreen: 'one',\r\n            },\r\n          },\r\n          TabTwo: {\r\n            screens: {\r\n              TabTwoScreen: 'two',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const hiddenPages = [\r\n  'Details',\r\n  'Home'\r\n];\r\n\r\nexport default linking;\r\n","import { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyBEFGwWzijjnpP4KTKu5XsCwaj3EuXy--A\",\r\n  authDomain: \"teste-react-native-9396d.firebaseapp.com\",\r\n  projectId: \"teste-react-native-9396d\",\r\n  storageBucket: \"teste-react-native-9396d.appspot.com\",\r\n  messagingSenderId: \"784258373513\",\r\n  appId: \"1:784258373513:web:6c01032644938e70273358\",\r\n  measurementId: \"G-3VG0GTBKJ0\"\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\n","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, onAuthStateChanged, signOut, User } from \"firebase/auth\";\r\nimport { firebaseConfig } from \"../config\";\r\nimport { IconType, UserData } from \"models\";\r\nimport { doc, getDoc, getFirestore, setDoc } from \"firebase/firestore\";\r\nimport { AntDesign, MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\nconst auth = getAuth();\r\nexport const db = getFirestore();\r\n\r\nexport const generateUserDocument = async ({ navigation }: NativeStackHeaderProps, user: User) => {\r\n  const docRef = doc(db, \"users\", user.uid);\r\n  const docSnap = await getDoc(docRef);\r\n\r\n  if (!docSnap.exists()) {\r\n    await setDoc(doc(db, \"users\", user.uid), {\r\n      id: user.uid,\r\n      userName: user.uid,\r\n      name: user.displayName,\r\n      email: user.email,\r\n      created_at: new Date().toLocaleString() + \"\",\r\n      photoUrl: user.photoURL,\r\n      notifications: [{\r\n        text: \"Welcome to Tinzzio!\",\r\n        createdAt: new Date().toLocaleString() + \"\",\r\n        read: false,\r\n        type: \"info\"\r\n      }]\r\n    } as UserData).then(async () => {\r\n      await setDoc(doc(db, \"usernames\", user.uid), {\r\n       id: user.uid,\r\n      })\r\n      getUserData(user.uid).then(() => {\r\n        navigation.navigate('Home');\r\n      })\r\n    }\r\n      );\r\n  } else {\r\n    navigation.navigate('Dashboard');\r\n  }\r\n};\r\n\r\nexport const getUserData = async (userId?: string): Promise<any> => {\r\n  if(!userId && auth.currentUser){\r\n    userId = auth.currentUser.uid\r\n  }\r\n  if(userId){\r\n  const docRef = doc(db, \"users\", userId);\r\n\r\n  return (await (getDoc(docRef))).data()\r\n  }\r\n}\r\n\r\nexport const checkIfLoggedIn = ({ navigation }: NativeStackHeaderProps, afterSuccess?: (user: User) => void, afterFailed?: void) => {\r\n  onAuthStateChanged(auth, (user) => {\r\n    if (user) {\r\n      afterSuccess?.(user)\r\n      } else {\r\n        afterFailed?? navigation.navigate('Login');\r\n    }\r\n  });\r\n};\r\n\r\nexport const logout = async ({ navigation }: NativeStackHeaderProps) => {\r\n  signOut(auth).then(() => {\r\n    navigation.navigate('Home')\r\n  }).catch((error) => {\r\n    console.log(error)\r\n  });\r\n}\r\n\r\nexport const getIconType = (iconType?: IconType) => {\r\n  // \"MaterialCommunityIcons\", \"MaterialIcons\", \"AntDesign\", \"Entypo\", \"Ionicons\", \"Ionicons\", \"Foundation\", \"FontAwesome\", \"FontAwesome5\"\r\n\r\n  let type = undefined\r\n  switch (iconType) {\r\n    case 'MaterialCommunityIcons':\r\n      type = MaterialCommunityIcons;\r\n      break;\r\n    case 'AntDesign':\r\n      type = AntDesign;\r\n      break;\r\n  }\r\n  return type\r\n}\r\n","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Box, Button, Heading, useTheme, useColorMode, Spinner, Input, Flex, Stack, ScrollView, KeyboardAvoidingView, Divider } from \"native-base\"\r\nimport * as Google from 'expo-google-app-auth';\r\nimport {\r\n  getAuth,\r\n  onAuthStateChanged,\r\n  GoogleAuthProvider,\r\n  signInWithCredential,\r\n  signInWithPopup,\r\n} from 'firebase/auth';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { Platform } from 'react-native';\r\nimport { checkIfLoggedIn, generateUserDocument } from \"services\";\r\nimport { NavigationProp, ParamListBase, useNavigation } from \"@react-navigation/native\";\r\nimport { firebaseConfig } from \"../../config\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\n\r\ninitializeApp(firebaseConfig);\r\nconst auth = getAuth();\r\n\r\nexport const LoginPage = () => {\r\n\r\n  const theme = useTheme();\r\n  const navigation: NavigationProp<ParamListBase> = useNavigation();\r\n\r\n  const { toggleColorMode } = useColorMode();\r\n  const [loadLogin, setLoadLogin] = useState(false);\r\n\r\n  const config = {\r\n    androidClientId: `1083228948497-a9323e3fj1tefr7cmlpsc3t7914j507s.apps.googleusercontent.com`,\r\n    androidStandaloneAppClientId: \"1083228948497-0asmrr9n5uofrlp8sv370p2qbkt918r0.apps.googleusercontent.com\",\r\n    scopes: ['profile', 'email']\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   checkIfLoggedIn({ navigation } as NativeStackHeaderProps, undefined, navigation.navigate('Dashboard'))\r\n  //   setLoadLogin(false)\r\n  // }, [loadLogin]);\r\n\r\n  useEffect(() => {\r\n      onAuthStateChanged(auth, (user) => {\r\n          if (user) {\r\n            navigation.navigate('Home')\r\n          }\r\n      });\r\n  },[]);\r\n\r\n  const onSignIn = (googleUser: any) => {\r\n    var unsubscribe = onAuthStateChanged(auth, user => {\r\n      unsubscribe();\r\n      var credential = GoogleAuthProvider.credential(\r\n        googleUser.idToken,\r\n        googleUser.accessToken\r\n      );\r\n\r\n      signInWithCredential(auth, credential)\r\n        .then((result) => {\r\n          if (result.user) {\r\n            generateUserDocument({ navigation } as NativeStackHeaderProps, result.user).then(() =>\r\n              setLoadLogin(false)\r\n            )\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          var errorCode = error.code;\r\n          var errorMessage = error.message;\r\n          console.log(errorCode)\r\n          console.log(errorMessage)\r\n          setLoadLogin(false)\r\n        });\r\n\r\n    });\r\n  };\r\n\r\n  const handleGoogleSignIn = async () => {\r\n    setLoadLogin(true)\r\n    if (Platform.OS === \"android\") {\r\n      Google.logInAsync(config).then((result) => {\r\n        if (result.type === \"success\") {\r\n          onSignIn(result);\r\n          return result.accessToken;\r\n        }\r\n      })\r\n        .catch(error => { console.log(error); setLoadLogin(false) })\r\n    }\r\n    else {\r\n      loginWeb();\r\n    }\r\n  }\r\n\r\n  const loginWeb = () => {\r\n    const googleProvider = new GoogleAuthProvider()\r\n    signInWithPopup(auth, googleProvider)\r\n      .then((result) => {\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        const credential = GoogleAuthProvider.credentialFromResult(result);\r\n        if (credential) {\r\n          onSignIn(credential)\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n        setLoadLogin(false)\r\n      });\r\n  }\r\n\r\n  return (\r\n    <ScrollView\r\n      _contentContainerStyle={{\r\n        height: \"100%\",\r\n        _light: { bg: theme.colors.white },\r\n        _dark: { bg: theme.colors.black }\r\n      }}>\r\n      <KeyboardAvoidingView h=\"100%\">\r\n        <Stack direction={[\"column\", \"row\"]} h=\"100%\">\r\n          <Flex w={[\"100%\", \"50%\"]} h={[\"40%\", \"100%\"]} bg=\"purple.500\" alignItems=\"center\" justifyContent=\"center\">\r\n          <Heading color=\"white\" size=\"md\">Tinzzio</Heading>\r\n          </Flex>\r\n          <Flex w={[\"100%\", \"50%\"]}\r\n            h={[\"60%\", \"100%\"]}\r\n            _light={{ bg: \"#FFFFFF\" }}\r\n            _dark={{ bg: theme.colors.black }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\">\r\n            {loadLogin && (\r\n              <Box pb={4}>\r\n              <Spinner size=\"lg\" />\r\n              </Box>\r\n            )}\r\n            <Box>\r\n              <Button\r\n                variant=\"default\"\r\n                size=\"lg\"\r\n                w=\"300px\"\r\n                leftIcon={<AntDesign name=\"google\" size={24} color=\"white\" />}\r\n                onPress={handleGoogleSignIn}>\r\n                Login with Google\r\n              </Button>\r\n              <Divider my={4} />\r\n              <Button variant=\"outline\" colorScheme=\"purple\" onPress={toggleColorMode} isDisabled>Create Account</Button>\r\n            </Box>\r\n          </Flex>\r\n        </Stack>\r\n      </KeyboardAvoidingView>\r\n    </ScrollView>\r\n  );\r\n}","import { createContext } from \"react\";\nimport '@expo/match-media';\nimport { useMediaQuery } from \"native-base\";\n\nexport const breakpoints = [544, 768, 1024, 1200, 1300]\n\nexport interface MediaQueryContextProps {\n  isSmall: boolean;\n  isSmallMedium: boolean;\n  isMedium: boolean;\n  isMediumLarge: boolean;\n  isLarge: boolean;\n}\n\nexport const MediaQueryContext = createContext<MediaQueryContextProps>({\n  isSmall: false,\n  isSmallMedium: false,\n  isMedium: false,\n  isMediumLarge: false,\n  isLarge: false\n});\n\n  const mediaQueries = {\n    small: breakpoints[0],\n    smallMedium: breakpoints[1],\n    medium: breakpoints[2],\n    mediumLarge: breakpoints[3],\n    large: breakpoints[4]\n  };\n\nexport const getMediaQuery = (type: \"isSmall\" | \"isSmallMedium\" | \"isMedium\" | \"isMediumLarge\" | \"isLarge\") => {\n\n  const [isSmall] = useMediaQuery({maxWidth: mediaQueries.small})\n  const [isSmallMedium] = useMediaQuery({maxWidth: mediaQueries.smallMedium});\n  const [isMedium] = useMediaQuery({maxWidth: mediaQueries.medium});\n  const [isMediumLarge] = useMediaQuery({maxWidth: mediaQueries.mediumLarge});\n  const [isLarge] = useMediaQuery({maxWidth: mediaQueries.large});\n\n  let value: boolean | undefined = undefined\n  switch(type){\n    case \"isSmall\" : \n    value = isSmall\n    break;\n    case \"isSmallMedium\" : \n    value = isSmallMedium\n    break;\n    case \"isMedium\" : \n    value = isMedium\n    break;\n    case \"isMediumLarge\" : \n    value = isMediumLarge\n    break;\n    case \"isLarge\" : \n    value = isLarge\n    break;\n  }\n\n  return value\n};","import { useNavigation } from \"@react-navigation/native\";\r\nimport { Box, Button, Center, Input, Text } from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport { NavigationProp, ParamListBase } from '@react-navigation/native';\r\nimport i18next from \"i18next\";\r\nimport { getMediaQuery } from \"../../styles\";\r\n\r\nexport const LoadRoom = () => {\r\n    const [roomId, setRoomId] = useState('');\r\n\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation()\r\n\r\n    const loadRoom = () => {\r\n        navigation.navigate('Room', { roomId: roomId });\r\n    }\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box mb=\"150\">\r\n                <Box bg=\"purple.600\" py={20} w={!isSmallMedium ? \"100vw\" : \"100%\"}\r\n                    style={{ alignSelf: !isSmallMedium ? 'center' : 'center' }} />\r\n                <Center\r\n                    position=\"absolute\"\r\n                    alignSelf=\"center\"\r\n                    top=\"50%\">\r\n                    <Box rounded=\"lg\"\r\n                        p={6}\r\n                        borderColor=\"coolGray.200\"\r\n                        borderWidth=\"1\"\r\n                        _dark={{\r\n                            borderColor: \"coolGray.600\",\r\n                            backgroundColor: \"gray.700\",\r\n                        }}\r\n                        _web={{\r\n                            shadow: 2,\r\n                            borderWidth: 0,\r\n                            cursor: \"default\"\r\n                        }}\r\n                        _light={{\r\n                            backgroundColor: \"gray.50\",\r\n                        }}>\r\n                        <Text bold>{i18next.t(\"loadQuiz.title\")}</Text>\r\n                        <Input minWidth=\"250px\" placeholder={i18next.t(\"loadQuiz.placeholder\")} mt={5} size=\"lg\" value={roomId} onChangeText={setRoomId} />\r\n                        <Button isDisabled={roomId === ''} onPress={loadRoom} mt={5}>{i18next.t(\"loadQuiz.loadRoomButton\")}</Button>\r\n                    </Box>\r\n                </Center>\r\n            </Box>\r\n        </>\r\n    );\r\n}","import { Box, Button, Text, Stack, HStack, Heading, AspectRatio, Center, IconButton, Icon, Menu, Pressable, Link } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NavigationProp, ParamListBase, useNavigation } from \"@react-navigation/native\";\r\nimport { RoomData } from \"models\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport { arrayRemove, collection, deleteDoc, doc, getDocs, query, updateDoc, where } from \"firebase/firestore\";\r\nimport { db } from \"services\";\r\nimport { Trans } from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\n\r\ninterface Props {\r\n    room: RoomData\r\n    ownerId?: string;\r\n}\r\n\r\nexport const CardItem: React.FC<Props> = ({ room, ownerId }) => {\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation()\r\n\r\n    // const [room, setRoom] = useState<RoomData | undefined>(undefined);\r\n         const [background, setBackground] = useState<string | undefined>(undefined);\r\n\r\n\r\n    const removeRoom = async (id: string) => {\r\n        if (room && ownerId) {\r\n            await deleteDoc(doc(db, \"rooms\", id)).then(async () => {\r\n                await updateDoc(doc(db, `users`, ownerId), { rooms: arrayRemove({ [room.id]: room }) }).then(() => {\r\n                    navigation.navigate('Home')\r\n                }).catch((error) => {\r\n                    console.log(error)\r\n                });\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n       setBackground(getRandomColor)\r\n    }, []);\r\n\r\n\r\n    const getRandomColor = () => {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    const disableRoom = async (id: string) => {\r\n        if (room && ownerId) {\r\n            await updateDoc(doc(db, `rooms`, id), { disabled: room.disabled === true ? false : true })\r\n                .then(async () => {\r\n                    await updateDoc(doc(db, `users`, ownerId), {\r\n                        rooms: [{\r\n                            [ownerId]: {\r\n                                ...room,\r\n                                disabled: !room.disabled\r\n                            }\r\n                        }]\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n    <>\r\n        {room && background && (\r\n             <Pressable w=\"100%\" _web={{\r\n                cursor: \"default\"\r\n            }}>\r\n             {({ isHovered, isFocused, isPressed }) => {\r\n               return (\r\n            <Box\r\n                minW={\"80\"}\r\n                minHeight=\"250\"\r\n                rounded=\"lg\"\r\n                overflow=\"hidden\"\r\n                borderColor=\"coolGray.200\"\r\n                borderWidth=\"1\"\r\n                style={{\r\n                    transform: [\r\n                      {\r\n                        scale: isHovered ? 0.98 : 1,\r\n                      },\r\n                    ],\r\n                  }}\r\n                _dark={{\r\n                    borderColor: \"coolGray.600\",\r\n                    backgroundColor: \"gray.700\",\r\n                }}\r\n                _web={{\r\n                    shadow: 2,\r\n                    borderWidth: 0,\r\n                    cursor: \"default\"\r\n                }}\r\n                _light={{\r\n                    backgroundColor: \"gray.50\",\r\n                }}\r\n            >\r\n                <Box>\r\n                    <AspectRatio w=\"100%\" ratio={16 / 9}>\r\n                        <Box bg={background}></Box>\r\n                    </AspectRatio>\r\n                    {ownerId === room.owner.id &&(\r\n                    <Center\r\n                        position=\"absolute\"\r\n                        top=\"0\"\r\n                        right=\"0\">\r\n                        <Menu\r\n                            trigger={(triggerProps) => {\r\n                                return (\r\n                                    <IconButton {...triggerProps} icon={<Icon as={<MaterialIcons name='more-vert' />} size='sm' color=\"white\" />} />\r\n                                )\r\n                            }}>\r\n                            <Menu.Item onPress={() => disableRoom(room.id)}>{room.disabled ? i18next.t('cardItem.enable') : i18next.t('cardItem.disable')}</Menu.Item>\r\n                            <Menu.Item onPress={() => removeRoom(room.id)}>{i18next.t('cardItem.remove')}</Menu.Item>\r\n                        </Menu>\r\n                    </Center>\r\n                    )}\r\n                    <Center\r\n                        bg=\"violet.500\"\r\n                        _dark={{\r\n                            bg: \"violet.400\",\r\n                        }}\r\n                        _text={{\r\n                            color: \"warmGray.50\",\r\n                            fontWeight: \"700\",\r\n                            fontSize: \"xs\",\r\n                        }}\r\n                        position=\"absolute\"\r\n                        bottom=\"0\"\r\n                        px=\"3\"\r\n                        py=\"1.5\">\r\n                        QUIZ\r\n                    </Center>\r\n                </Box>\r\n                <Stack p=\"4\" space={3}>\r\n                    <Stack space={2}>\r\n                        <Heading size=\"md\" ml=\"-1\">\r\n                            {room.name}\r\n                        </Heading>\r\n                        <Link onPress={() => navigation.navigate('Users', { userName: room.owner.userName })}>\r\n                        <Text\r\n                        bold\r\n                            fontSize=\"xs\"\r\n                            _light={{\r\n                                color: \"violet.500\",\r\n                            }}\r\n                            _dark={{\r\n                                color: \"violet.400\",\r\n                            }}\r\n                            fontWeight=\"500\"\r\n                            ml=\"-0.5\"\r\n                            mt=\"-1\"\r\n                        >\r\n                            {i18next.t('cardItem.createdBy').replace('${user}', room.owner.name as string)}\r\n                        </Text>\r\n                        </Link>\r\n                    </Stack>\r\n                    <Text fontWeight=\"400\">\r\n                        {i18next.t('cardItem.questions').replace('${number}', room.questions.length.toString())}\r\n                    </Text>\r\n                    <HStack alignItems=\"center\" space={4} justifyContent=\"space-between\">\r\n                        <HStack alignItems=\"center\">\r\n                            {room.created_at && (\r\n                                <Text\r\n                                    color=\"coolGray.600\"\r\n                                    _dark={{\r\n                                        color: \"warmGray.200\",\r\n                                    }}\r\n                                    fontWeight=\"400\">\r\n                                    {i18next.t('cardItem.createdAt').replace('${date}',(room.created_at as string).split(' ')[0])}\r\n                                </Text>\r\n                            )}\r\n                        </HStack>\r\n                    </HStack>\r\n                    <HStack alignItems=\"center\" space={4} w=\"100%\" justifyContent=\"center\">\r\n                        <HStack alignItems=\"center\" justifyContent=\"center\" >\r\n                            <Button variant=\"default\" onPress={() => navigation.navigate('Room', { roomId: room.id })}>{i18next.t(\"cardItem.playQuiz\")}</Button>\r\n                        </HStack>\r\n                    </HStack>\r\n                </Stack>\r\n            </Box>\r\n             )\r\n            }}\r\n          </Pressable>\r\n        )}\r\n    </>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Avatar, Badge, Box, Button, Divider, Flex, Icon, IconButton, Menu, Pressable, Text, useColorMode, useColorModeValue, useTheme } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { db, getUserData, logout } from \"services\";\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\r\nimport i18next from \"i18next\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Entypo, FontAwesome5 } from \"@expo/vector-icons\"\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { UserData } from \"models\";\r\nimport { arrayRemove, doc, onSnapshot, updateDoc } from \"firebase/firestore\";\r\nimport { Trans } from \"react-i18next\";\r\n\r\nexport const MenuOptions = ({ navigation }: NativeStackHeaderProps) => {\r\n\r\n    const theme = useTheme();\r\n    const { toggleColorMode } = useColorMode();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n\r\n    const auth = getAuth();\r\n\r\n    const loadUser = () => {\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                onSnapshot(doc(db, \"users\", user.uid), (doc) => {\r\n                    getUserData(user.uid).then(user => setUser(user));\r\n                });\r\n\r\n            } else {\r\n                navigation.navigate('Login');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUser(undefined)\r\n        loadUser();\r\n    }, [auth]);\r\n\r\n    const LanguageMenu: React.FC = () => {\r\n        const changeLanguage = async (lng: string) => {\r\n            await i18next.changeLanguage(lng).then(\r\n                () => { AsyncStorage.setItem('language', lng).then(() => navigation.navigate('Home')) }\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Menu\r\n                    style={{ alignItems: \"flex-start\", justifyContent: \"flex-start\" }}\r\n                    trigger={(triggerProps) => {\r\n                        return (\r\n                            <IconButton\r\n                                {...triggerProps}\r\n                                mr={4}\r\n                                icon={\r\n                                    <Icon as={FontAwesome5} name=\"globe-americas\" />\r\n                                }\r\n                                borderRadius=\"full\"\r\n                                _icon={{\r\n                                    color: theme.colors.coolGray[600],\r\n                                    size: \"sm\",\r\n                                }}\r\n                                _hover={{\r\n                                    bg: \"coolGray.600:alpha.20\",\r\n                                }}\r\n                                _pressed={{\r\n                                    bg: \"coolGray.600:alpha.30\",\r\n                                }}\r\n\r\n                            />\r\n                        )\r\n                    }}>\r\n                    <Menu.Item pr={20} onPress={() => changeLanguage(\"en\")}><Text bold>English </Text></Menu.Item>\r\n                    <Menu.Item pr={20} onPress={() => changeLanguage(\"ptBR\")}><Text bold>Portuguese</Text></Menu.Item>\r\n                </Menu>\r\n            </>\r\n        )\r\n    };\r\n\r\n\r\n    const NotificationsMenu: React.FC = () => {\r\n        const readAllNotifications = async () => {\r\n            if (user && user.notifications && user.notifications.length > 0) {\r\n                if (user.notifications.filter(it => it.read === false).length > 0) {\r\n\r\n                    let tempNotifications = [...user.notifications];\r\n                    let indexes: number[] = [];\r\n                    const ref = doc(db, \"users\", user.id);\r\n\r\n                    user.notifications.forEach((it, index) => {\r\n                        if (it.read === false) {\r\n                            indexes.push(index);\r\n                        }\r\n                    });\r\n\r\n                    indexes.map(val => tempNotifications[val].read = true);\r\n\r\n                    await updateDoc(ref, {\r\n                        notifications: tempNotifications\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        const removeNotification = async (index: number) => {\r\n            if (user && user.notifications && user.notifications.length > 0) {\r\n                let tempNotifications = [...user.notifications];\r\n\r\n                const ref = doc(db, \"users\", user.id);\r\n                tempNotifications.splice(index, 1)\r\n\r\n                await updateDoc(ref, {\r\n                    notifications: tempNotifications\r\n                });\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Menu\r\n                    onClose={() => readAllNotifications()}\r\n                    style={{ alignItems: \"flex-start\", justifyContent: \"flex-start\" }}\r\n                    trigger={(triggerProps) => {\r\n                        return (\r\n                            <>\r\n                                <IconButton\r\n                                    {...triggerProps}\r\n                                    mr={4}\r\n                                    icon={<>\r\n                                        {user && user.notifications && user.notifications.length > 0 && (\r\n                                            user.notifications.filter(it => it.read === false).length > 0 && (\r\n                                                <Badge\r\n                                                    colorScheme=\"danger\"\r\n                                                    rounded=\"full\"\r\n                                                    px={1}\r\n                                                    py={0}\r\n                                                    mb={-4}\r\n                                                    mr={-2}\r\n                                                    zIndex={1}\r\n                                                    variant=\"solid\"\r\n                                                    alignSelf=\"flex-end\"\r\n                                                    _text={{\r\n                                                        fontSize: 10,\r\n                                                    }}\r\n                                                >\r\n                                                    {user.notifications.filter(it => it.read === false).length}\r\n                                                </Badge>\r\n                                            )\r\n                                        )}\r\n                                        <Icon as={MaterialCommunityIcons} name=\"bell\" color={theme.colors.coolGray[600]} size=\"sm\" />\r\n                                    </>\r\n                                    }\r\n                                    borderRadius=\"full\"\r\n                                    _hover={{\r\n                                        bg: \"coolGray.600:alpha.20\",\r\n                                    }}\r\n                                    _pressed={{\r\n                                        bg: \"coolGray.600:alpha.30\",\r\n                                    }}\r\n\r\n                                />\r\n                            </>\r\n                        )\r\n                    }}>\r\n                    {user && (\r\n                        <>\r\n                            {user.notifications && user.notifications.length > 0 ? (\r\n                                user.notifications.map((notification, index) => (\r\n                                    <Menu.Item py={5} pr={40} key={index}>\r\n                                        <Box>\r\n                                        <Flex flexDirection=\"row\" width=\"100%\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                            {(notification.read === false) && (\r\n                                                <Badge mr={4} colorScheme=\"info\" _text={{ fontWeight: \"bold\" }}>NEW</Badge>\r\n                                            )}\r\n                                            <Text bold>{notification.text}</Text>\r\n                                            {/* <Button onPress={() => removeNotification(index)}>Remover</Button> */}\r\n                                        </Flex>\r\n                                        </Box>\r\n                                    </Menu.Item>\r\n\r\n                                ))\r\n                            ) : (\r\n                                <Menu.Item pr={40}><Text bold>No notifications.</Text></Menu.Item>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </Menu>\r\n            </>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box flexDirection=\"row\" style={{ alignItems: \"center\" }}>\r\n                <NotificationsMenu />\r\n                <LanguageMenu />\r\n                {/* -------------------------------------------------------------------------------------------- */}\r\n                <Menu\r\n                    style={{ alignItems: \"flex-start\", justifyContent: \"flex-start\" }}\r\n                    trigger={(triggerProps) => {\r\n                        return (\r\n                            <IconButton\r\n                                {...triggerProps}\r\n                                mr={4}\r\n                                icon={\r\n                                    <FontAwesome selectable={false} name=\"user-circle\" size={30} color={theme.colors.purple[700]} />\r\n                                }\r\n                                borderRadius=\"full\"\r\n                                _hover={{\r\n                                    bg: \"purple.700:alpha.20\",\r\n                                }}\r\n                                _pressed={{\r\n                                    bg: \"purple.700:alpha.30\",\r\n                                }}\r\n                            />\r\n                        )\r\n                    }}>\r\n                    <Menu.Item pr={20} onPress={() => {navigation.navigate('Users', {userName: user?.userName})}}>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <MaterialIcons name=\"person\" size={24} color={theme.colors.coolGray[500]} />\r\n                            <Flex>\r\n                                <Text bold pl={2}>{i18next.t(\"navbarOptions.profile\")}</Text>\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Menu.Item>\r\n                    <Menu.Item pr={20} onPress={() => navigation.navigate('Settings')}>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <MaterialIcons name=\"settings\" size={24} color={theme.colors.coolGray[500]} />\r\n                            <Flex>\r\n                                <Text bold pl={2}>{i18next.t(\"navbarOptions.settings\")}</Text>\r\n                            </Flex>\r\n                        </Flex>\r\n                    </Menu.Item>\r\n                    <Menu.Item pr={20} onPress={toggleColorMode}>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <MaterialCommunityIcons name={useColorModeValue(\"moon-waning-crescent\", \"white-balance-sunny\")} size={24} color={theme.colors.coolGray[500]} />\r\n                            <Text pl={2} bold>\r\n                                <Trans i18nKey=\"navbarOptions.changeTheme\" />\r\n                            </Text>\r\n                        </Flex>\r\n                    </Menu.Item>\r\n                    <Divider />\r\n                    <Menu.Item pr={20} onPress={() => logout({ navigation } as NativeStackHeaderProps)}>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <MaterialIcons name=\"logout\" size={24} color={theme.colors.red[600]} />\r\n                            <Text bold pl={2} color=\"red.600\">{i18next.t(\"navbarOptions.logout\")}</Text>\r\n                        </Flex>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Box>\r\n        </>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, SimpleGrid, Input, ScaleFade, Spinner, Heading, useMediaQuery, View, Center } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { LoadRoom } from \"../Rooms/LoadRoom\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { CardItem } from \"../shared\";\r\nimport { collection, getDocs, limit, query, where } from \"firebase/firestore\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { Trans } from \"react-i18next\";\r\nimport { RoomData, UserData } from \"models\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport i18next from \"i18next\";\r\nimport Swiper from 'react-native-swiper'\r\nimport { StyleSheet } from 'react-native'\r\n\r\nexport const Dashboard = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [rooms, setRooms] = useState<RoomData[]>([]);\r\n    const auth = getAuth();\r\n\r\n    useEffect(() => {\r\n        setRooms([])\r\n        setUser(undefined)\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                getUserData(user.uid).then(user => { setUser(user) }).then(() => loadRoom())\r\n            } else {\r\n                navigation.navigate('Login')\r\n            }\r\n        });\r\n\r\n    }, [isFocused, auth]);\r\n\r\n    const loadRoom = async () => {\r\n        const ref = collection(db, \"rooms\");\r\n        const q = query(ref, where(\"privacy\", \"==\", \"public\"), limit(10));\r\n        const querySnapshot = await getDocs(q);\r\n        const tempRoom: RoomData[] = []\r\n\r\n        querySnapshot.forEach((doc) => {\r\n            tempRoom.push(doc.data() as RoomData)\r\n        });\r\n\r\n        setRooms(tempRoom)\r\n    }\r\n\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n    // const styles = StyleSheet.create({\r\n    //     wrapper: {},\r\n    //     slide1: {\r\n    //         flex: 1,\r\n    //         justifyContent: 'center',\r\n    //         alignItems: 'center',\r\n    //         backgroundColor: '#9DD6EB'\r\n    //     },\r\n    //     slide2: {\r\n    //         flex: 1,\r\n    //         justifyContent: 'center',\r\n    //         alignItems: 'center',\r\n    //         backgroundColor: '#97CAE5'\r\n    //     },\r\n    //     slide3: {\r\n    //         flex: 1,\r\n    //         justifyContent: 'center',\r\n    //         alignItems: 'center',\r\n    //         backgroundColor: '#151515'\r\n    //     },\r\n    // })\r\n\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1,\r\n                // justifyContent: 'center',\r\n                alignItems: isSmallMedium ? undefined : 'center'\r\n                // justifyContent: 'center', alignItems: 'center', marginVertical: 80, marginHorizontal: 10\r\n            }}>\r\n            {user ? (\r\n                <ScaleFade in={user !== undefined}>\r\n                    <>\r\n                        <LoadRoom />\r\n                        <Box style={{ marginHorizontal: 10 }}>\r\n                            {/* <Box mt={6} w={280} h={300} style={{ alignSelf: 'center' }}>\r\n                                <Swiper\r\n                                    showsButtons={true}\r\n                                    loop={false}\r\n                                    autoplay={true}\r\n                                    autoplayTimeout={4}\r\n                                    showsPagination={true}\r\n                                >\r\n                                    <View style={styles.slide1}>\r\n                                        <Text bold color=\"white\" fontSize={30}>Ei</Text>\r\n                                    </View>\r\n                                    <View style={styles.slide2}>\r\n                                        <Text color=\"white\" fontSize={30}>Oi</Text>\r\n                                    </View>\r\n                                    <View style={styles.slide3}>\r\n                                        <Text color=\"white\" fontSize={30}>Fala</Text>\r\n                                    </View>\r\n                                </Swiper>\r\n                            </Box> */}\r\n                            <Box>\r\n                                <Button style={{ alignSelf: 'center' }} variant=\"default\" mt={4} onPress={() => navigation.navigate('CreateRoom')}>{i18next.t(\"dashboard.createQuiz\")}</Button>\r\n                            </Box>\r\n                            {rooms && rooms.length > 0 && (\r\n                                <Box mt={10}>\r\n                                    <Heading mb={10} alignSelf=\"center\"><Trans i18nKey=\"dashboard.recommendations\" /></Heading>\r\n                                    <SimpleGrid columns={isSmallMedium ? 1 : 3} spacingX={10} spacingY={5} alignItems=\"center\" mx={[10, 0]} mb={200}>\r\n                                        {rooms.map((room, key) => {\r\n                                            return (\r\n                                                <Box key={key} minWidth=\"200px\" mt={2}>\r\n                                                    {/* <CardItem room={Object.values(room)[0]} ownerId={user.id} /> */}\r\n                                                    <CardItem room={room} ownerId={user.id} />\r\n                                                </Box>\r\n                                            )\r\n                                        })}\r\n                                    </SimpleGrid>\r\n                                </Box>\r\n                            )}\r\n                        </Box>\r\n                    </>\r\n                </ScaleFade>\r\n            ) :\r\n                (<Center width=\"100%\" height=\"100%\">\r\n                    <Spinner size=\"lg\" />\r\n                    </Center>)}\r\n        </ScrollView>\r\n    );\r\n}","import { NavigationProp, ParamListBase, useIsFocused, useNavigation } from \"@react-navigation/native\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { Box, Center, HStack, Spinner, useToast, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {useRoute} from '@react-navigation/native';\r\n\r\nexport const Home = () => {\r\n    const toast = useToast();\r\n    const id = \"toast-welcome\"\r\n    const [loadToast, setLoadToast] = useState(true);\r\n    const isFocused = useIsFocused();\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation();\r\n    const auth = getAuth();\r\n    const route = useRoute();\r\n\r\n\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                if (loadToast) {\r\n                    showToast(user.displayName);\r\n                    setLoadToast(false)\r\n                }\r\n                navigation.navigate('Dashboard');\r\n            } else if(route.name !== \"Word\") {\r\n                navigation.navigate('Login');\r\n            }\r\n        });\r\n    },[isFocused]);\r\n\r\n    const showToast = (name?: string | null) => {\r\n        if (!toast.isActive(id)) {\r\n            toast.show({\r\n                id,\r\n                render: () => {\r\n                    return (\r\n                        <Box bg=\"emerald.500\" px=\"2\" py=\"2\" rounded=\"sm\" mb={5}>\r\n                            <Text fontSize={16} color=\"white\">Logged as {name}!</Text>\r\n                        </Box>\r\n                    )\r\n                },\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Center flex={1} px=\"3\">\r\n            <HStack space={2} alignItems=\"center\">\r\n                <Spinner size=\"lg\" />\r\n            </HStack>\r\n        </Center>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Alert, Box, Button, Center, Flex, HStack, IconButton, Spinner, Text, useTheme, useToast, VStack, ScrollView, Input, Pressable, Icon, Badge } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport * as Clipboard from 'expo-clipboard';\r\nimport { NavigationProp, ParamListBase, useIsFocused, useNavigation } from \"@react-navigation/native\";\r\nimport { QuestionValues, RoomData, RoomParticipants } from \"models\";\r\nimport { db, getUserData } from \"services\";\r\nimport { arrayRemove, arrayUnion, doc, getDoc, updateDoc } from \"firebase/firestore\";\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport { Trans } from \"react-i18next\";\r\nimport i18next from \"i18next\";\r\n\r\ninterface RoomId {\r\n    roomId: string;\r\n}\r\n\r\nexport const Room = ({ route }: NativeStackHeaderProps) => {\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation();\r\n    const [room, setRoom] = useState<RoomData | undefined>(undefined);\r\n    const [roomExists, setRoomExists] = useState<boolean | undefined>(undefined);\r\n    const [roomId, setRoomId] = useState<RoomId | undefined>(route.params as RoomId);\r\n    const [userLoggedId, setUserLoggedId] = useState<string | undefined>(undefined);\r\n    const [answeredQuestion, setAnsweredQuestion] = useState<QuestionValues[]>([]);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [finished, setFinished] = useState<boolean | undefined>(false);\r\n    const [isStarted, setIsStarted] = useState<boolean>(false);\r\n\r\n\r\n    const toast = useToast();\r\n    const isFocused = useIsFocused();\r\n\r\n\r\n    useEffect(() => {\r\n        resetRoom()\r\n        if (isFocused) {\r\n            setRoomId(route.params as RoomId)\r\n        }\r\n\r\n        const getRoom = async (roomId: RoomId) => {\r\n            const docRef = doc(db, \"rooms\", (roomId.roomId).replace('room-', ''));\r\n            const docSnap = await getDoc(docRef);\r\n\r\n            if (!docSnap.exists()) {\r\n                setRoomExists(false)\r\n            }\r\n            else {\r\n                setRoom(docSnap.data() as RoomData)\r\n                getUserData().then(user => {\r\n                    setUserLoggedId(user.id)\r\n\r\n                })\r\n            }\r\n        }\r\n\r\n        if (roomId && isFocused) {\r\n            getRoom(roomId)\r\n        }\r\n    }, [roomId, isFocused]);\r\n\r\n    // check if user already answered and load results\r\n    useEffect(() => {\r\n        if (room !== undefined && userLoggedId) {\r\n            if (room.participants && room.participants.length > 0) {\r\n                const userIndex = room.participants.findIndex(it => it.id === userLoggedId);\r\n\r\n                if (userIndex !== undefined) {\r\n                    if (room.participants[userIndex].answers) {\r\n                        setAnsweredQuestion(room.participants[userIndex].answers as QuestionValues[])\r\n                        setFinished(true)\r\n                        setRoomExists(true)\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                setRoomExists(true)\r\n            }\r\n        }\r\n    }, [room, userLoggedId]);\r\n\r\n    const goBack = () => {\r\n        resetRoom()\r\n        navigation.navigate('Home');\r\n    }\r\n\r\n    const resetRoom = () => {\r\n        setRoom(undefined);\r\n        setRoomExists(undefined);\r\n        setRoomId(undefined);\r\n        setAnsweredQuestion([]);\r\n        setFinished(false);\r\n        setCurrentIndex(0);\r\n        setUserLoggedId(undefined);\r\n        setIsStarted(false)\r\n    }\r\n\r\n    const checkQuestion = (option: string, index: number) => {\r\n        //check if is correct then add in the index of array if is correct\r\n        let values = [...answeredQuestion]\r\n        if (option === room?.questions[index].correctOption) {\r\n            values[index] = {\r\n                value: option,\r\n                isCorrect: true\r\n            };\r\n            setAnsweredQuestion(values);\r\n        }\r\n        else {\r\n            values[index] = {\r\n                value: option,\r\n                isCorrect: false\r\n            };\r\n            setAnsweredQuestion(values);\r\n        }\r\n    }\r\n\r\n    const nextQuestion = async () => {\r\n        if (room && roomId) {\r\n            if (currentIndex >= room?.questions.length - 1) {\r\n                setFinished(true);\r\n                sendQuestions();\r\n            }\r\n            else {\r\n                setCurrentIndex(currentIndex + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const sendQuestions = async () => {\r\n        if (room && roomId && userLoggedId) {\r\n            const docRef = doc(db, \"rooms\", (roomId.roomId).replace('room-', ''));\r\n\r\n            const updateParticipant = async (values?: RoomParticipants[]) => {\r\n                await updateDoc(docRef, {\r\n                    participants: values ?? arrayUnion({\r\n                        id: userLoggedId,\r\n                        answers: answeredQuestion\r\n                    })\r\n                });\r\n            }\r\n            if (room.participants && room.participants.length > 0) {\r\n                const userIndex = room.participants.findIndex(it => it.id === userLoggedId);\r\n                //if user already answered update the answers\r\n                if (userIndex !== undefined) {\r\n                    let values = [...room.participants]\r\n                    values[userIndex].answers = answeredQuestion\r\n                    updateParticipant(values);\r\n                }\r\n                //else include user as participant\r\n                else {\r\n                    updateParticipant();\r\n                }\r\n            }\r\n            //if participants list is null\r\n            else {\r\n                updateParticipant();\r\n            }\r\n        }\r\n    }\r\n\r\n    const restart = async () => {\r\n        resetRoom();\r\n        if (room && roomId && userLoggedId) {\r\n            const docRef = doc(db, \"rooms\", (roomId.roomId).replace('room-', ''));\r\n            if (room.participants) {\r\n                const userIndex = room.participants.findIndex(it => it.id === userLoggedId);\r\n                if (userIndex !== undefined) {\r\n                    await updateDoc(docRef, {\r\n                        participants: arrayRemove({\r\n                            id: userLoggedId,\r\n                            answers: answeredQuestion\r\n                        })\r\n                    }).then(() => setRoomId(route.params as RoomId))\r\n                        .catch(error => console.log(error))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const copyCLipboard = () => {\r\n        if (roomId) {\r\n            Clipboard.setString(roomId.roomId);\r\n            toast.show({\r\n                render: () => {\r\n                    return (\r\n                        <Box bg=\"blue.500\" px=\"2\" py=\"2\" rounded=\"sm\" mb={5}>\r\n                            <Text color=\"white\" bold fontSize={16}>Quiz PIN copied successfully!</Text>\r\n                        </Box>\r\n                    )\r\n                },\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ScrollView contentContainerStyle={{\r\n                flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 10, width: \"100%\"\r\n            }}>\r\n                {(room && roomExists === true) ? (\r\n                    <>\r\n                        {!room.disabled ? (\r\n                            <>\r\n                                {!finished ? (\r\n                                    <>\r\n                                        <Box px={[4, 0]} w={[\"100%\", \"\"]}>\r\n                                            {!isStarted && (\r\n                                                <>\r\n                                                    <Text fontSize={[20, 26]} mb={10} alignSelf='center' bold>{room?.name}</Text>\r\n                                                    <Button mt={4} px={10} py={3} alignSelf='center' variant=\"default\" onPress={() => setIsStarted(true)}>Start Quiz!</Button>\r\n                                                </>\r\n                                            )}\r\n                                            {isStarted && (\r\n                                                room.questions.map((question, index) => (\r\n                                                    <Box key={\"question-\" + index}>\r\n                                                        {currentIndex === index && (\r\n                                                            <>\r\n                                                                <VStack>\r\n                                                                    <Badge\r\n                                                                        bg=\"white\"\r\n                                                                        rounded=\"6px\"\r\n                                                                        mb={-3}\r\n                                                                        px={3}\r\n                                                                        zIndex={1}\r\n                                                                        variant=\"solid\"\r\n                                                                        alignSelf=\"center\"\r\n                                                                        _text={{\r\n                                                                            fontSize: 14,\r\n                                                                            color: \"purple.600\",\r\n                                                                            fontWeight: \"bold\"\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {index + 1 + \"/\" + room?.questions.length}\r\n                                                                    </Badge>\r\n                                                                    <Box\r\n                                                                        p=\"2\"\r\n                                                                        bg=\"purple.600\"\r\n                                                                        borderRadius=\"sm\"\r\n                                                                    >\r\n                                                                        <Text fontSize={[16, 30]} bold color=\"white\">{question.name}</Text>\r\n\r\n                                                                    </Box>\r\n                                                                </VStack>\r\n                                                                {/* ------------------------------------- QUESTIONS ------------------------------------- */}\r\n                                                                <Flex mt={6} direction=\"row\" w=\"full\" justifyContent=\"center\" alignItems=\"center\" flexWrap=\"wrap\">\r\n                                                                    {question.a && (\r\n                                                                        <Flex w=\"50%\"\r\n                                                                            mb={4}\r\n                                                                            pr={[2, 4]}>\r\n                                                                            <Box\r\n                                                                                w=\"100%\"\r\n                                                                                justifyContent=\"center\">\r\n                                                                                <Pressable\r\n                                                                                    onPress={() => checkQuestion('a', index)}>\r\n                                                                                    {({ isHovered, isPressed }) => {\r\n                                                                                        return (\r\n                                                                                            <Box w=\"100%\"\r\n                                                                                                backgroundColor={(answeredQuestion?.[index]?.value === \"a\") ? \"lightBlue.800\" : isHovered ? \"lightBlue.700\" : \"lightBlue.600\"}\r\n                                                                                                mr={2} mt={4}\r\n                                                                                                pr={[0, 100]}\r\n                                                                                                rounded=\"md\" py={2}\r\n                                                                                                style={{\r\n                                                                                                    transform: [\r\n                                                                                                        {\r\n                                                                                                            scale: isPressed ? 0.96 : 1,\r\n                                                                                                        },\r\n                                                                                                    ],\r\n                                                                                                }}>\r\n                                                                                                <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                                                                                                    <Icon pl={2} as={MaterialCommunityIcons} color=\"purple.800\" name=\"alpha-a-circle-outline\" size=\"sm\" />\r\n                                                                                                    <Text pl={4} bold color=\"white\">\r\n                                                                                                        {question.a}\r\n                                                                                                    </Text>\r\n                                                                                                </Flex>\r\n                                                                                            </Box>\r\n                                                                                        )\r\n                                                                                    }}\r\n                                                                                </Pressable>\r\n                                                                            </Box>\r\n                                                                        </Flex>\r\n                                                                    )}\r\n                                                                    {question.b && (\r\n                                                                        <Flex w=\"50%\"\r\n                                                                            mb={4}>\r\n                                                                            <Box\r\n                                                                                w=\"100%\"\r\n                                                                                justifyContent=\"center\">\r\n                                                                                <Pressable\r\n                                                                                    onPress={() => checkQuestion('b', index)}>\r\n                                                                                    {({ isHovered, isPressed }) => {\r\n                                                                                        return (\r\n                                                                                            <Box w=\"100%\"\r\n                                                                                                backgroundColor={(answeredQuestion?.[index]?.value === \"b\") ? \"lightBlue.800\" : isHovered ? \"lightBlue.700\" : \"lightBlue.600\"}\r\n                                                                                                mr={2} mt={4}\r\n                                                                                                pr={[0, 100]}\r\n                                                                                                rounded=\"md\" py={2}\r\n                                                                                                style={{\r\n                                                                                                    transform: [\r\n                                                                                                        {\r\n                                                                                                            scale: isPressed ? 0.96 : 1,\r\n                                                                                                        },\r\n                                                                                                    ],\r\n                                                                                                }}>\r\n                                                                                                <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                                                                                                    <Icon pl={2} as={MaterialCommunityIcons} color=\"purple.800\" name=\"alpha-b-circle\" size=\"sm\" />\r\n                                                                                                    <Text pl={4} bold color=\"white\">\r\n                                                                                                        {question.b}\r\n                                                                                                    </Text>\r\n                                                                                                </Flex>\r\n                                                                                            </Box>\r\n                                                                                        )\r\n                                                                                    }}\r\n                                                                                </Pressable>\r\n                                                                            </Box>\r\n                                                                        </Flex>\r\n                                                                    )}\r\n                                                                    {question.c && (\r\n                                                                        <Flex w=\"50%\"\r\n                                                                            mb={4}\r\n                                                                            pr={[2, 4]}>\r\n                                                                            <Box\r\n                                                                                w=\"100%\"\r\n                                                                                justifyContent=\"center\">\r\n\r\n                                                                                <Pressable\r\n                                                                                    onPress={() => checkQuestion('c', index)}>\r\n                                                                                    {({ isHovered, isPressed }) => {\r\n                                                                                        return (\r\n                                                                                            <Box w=\"100%\"\r\n                                                                                                backgroundColor={(answeredQuestion?.[index]?.value === \"c\") ? \"lightBlue.800\" : isHovered ? \"lightBlue.700\" : \"lightBlue.600\"}\r\n                                                                                                mr={2} mt={4}\r\n                                                                                                pr={[0, 100]}\r\n                                                                                                rounded=\"md\" py={2}\r\n                                                                                                style={{\r\n                                                                                                    transform: [\r\n                                                                                                        {\r\n                                                                                                            scale: isPressed ? 0.96 : 1,\r\n                                                                                                        },\r\n                                                                                                    ],\r\n                                                                                                }}>\r\n                                                                                                <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                                                                                                    <Icon pl={2} as={MaterialCommunityIcons} color=\"purple.800\" name=\"alpha-c-circle-outline\" size=\"sm\" />\r\n                                                                                                    <Text pl={4} bold color=\"white\">\r\n                                                                                                        {question.c}\r\n                                                                                                    </Text>\r\n                                                                                                </Flex>\r\n                                                                                            </Box>\r\n                                                                                        )\r\n                                                                                    }}\r\n                                                                                </Pressable>\r\n                                                                            </Box>\r\n                                                                        </Flex>\r\n                                                                    )}\r\n                                                                    {question.d && (\r\n                                                                        <Flex w=\"50%\"\r\n                                                                            mb={4}>\r\n                                                                            <Box\r\n                                                                                w=\"100%\"\r\n                                                                                justifyContent=\"center\">\r\n\r\n                                                                                <Pressable\r\n                                                                                    onPress={() => checkQuestion('d', index)}>\r\n                                                                                    {({ isHovered, isPressed }) => {\r\n                                                                                        return (\r\n                                                                                            <Box w=\"100%\"\r\n                                                                                                backgroundColor={(answeredQuestion?.[index]?.value === \"d\") ? \"lightBlue.800\" : isHovered ? \"lightBlue.700\" : \"lightBlue.600\"}\r\n                                                                                                mr={2} mt={4}\r\n                                                                                                pr={[0, 100]}\r\n                                                                                                rounded=\"md\" py={2}\r\n                                                                                                style={{\r\n                                                                                                    transform: [\r\n                                                                                                        {\r\n                                                                                                            scale: isPressed ? 0.96 : 1,\r\n                                                                                                        },\r\n                                                                                                    ],\r\n                                                                                                }}>\r\n                                                                                                <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                                                                                                    <Icon pl={2} as={MaterialCommunityIcons} color=\"purple.800\" name=\"alpha-d-circle\" size=\"sm\" />\r\n                                                                                                    <Text pl={4} bold color=\"white\">\r\n                                                                                                        {question.d}\r\n                                                                                                    </Text>\r\n                                                                                                </Flex>\r\n                                                                                            </Box>\r\n                                                                                        )\r\n                                                                                    }}\r\n                                                                                </Pressable>\r\n                                                                            </Box>\r\n                                                                        </Flex>\r\n                                                                    )}\r\n                                                                </Flex>\r\n                                                                <Button mt={8} variant=\"default\" style={{ alignSelf: 'center' }} onPress={() => nextQuestion()} isDisabled={answeredQuestion[index] === undefined}>\r\n                                                                    {currentIndex >= room?.questions.length - 1 ? i18next.t(\"room.finishButton\") : i18next.t(\"room.nextButton\")}\r\n                                                                </Button>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </Box>\r\n\r\n                                                ))\r\n                                            )}\r\n                                            <Button mt={20} style={{ alignSelf: 'center' }} onPress={goBack}>{i18next.t(\"room.backDashboard\")}</Button>\r\n                                            <Button mt={4} style={{ alignSelf: 'center' }} colorScheme=\"primary\" onPress={() => copyCLipboard()}>{i18next.t(\"room.copyPIN\")}</Button>\r\n                                        </Box>\r\n                                    </>\r\n                                ) : (\r\n                                    //-------------------------------------------RESULTS-------------------------------------------\r\n                                    <>\r\n                                        <Text bold fontSize={24}>{i18next.t(\"room.resultsTitle\")}</Text>\r\n                                        <Text>Correct answers: {answeredQuestion.filter(it => it.isCorrect === true).length} of {room.questions.length}</Text>\r\n                                        <Text>Percentage: {(answeredQuestion.filter(it => it.isCorrect === true).length / room.questions.length) * 100}%</Text>\r\n                                        {room.questions.map((question, index) => {\r\n                                            return (\r\n                                                <Box key={index} mt={5}>\r\n                                                    <Text> {question.name}</Text>\r\n                                                    {answeredQuestion && answeredQuestion[index].isCorrect === true ? (\r\n                                                        <Alert status='success' mt={4}>\r\n                                                            <VStack space={2} flexShrink={1} w=\"100%\">\r\n                                                                <HStack flexShrink={1} space={2} justifyContent=\"space-between\">\r\n                                                                    <HStack space={2} flexShrink={1}>\r\n                                                                        <Alert.Icon mt=\"1\" />\r\n                                                                        <Text fontSize=\"md\" color=\"coolGray.800\">\r\n                                                                            {i18next.t(\"room.correctAnswer\")}\r\n                                                                        </Text>\r\n                                                                    </HStack>\r\n\r\n                                                                </HStack>\r\n                                                            </VStack>\r\n                                                        </Alert>\r\n                                                    ) : answeredQuestion && answeredQuestion[index].isCorrect === false && (\r\n                                                        <Alert status='error' mt={4}>\r\n                                                            <VStack space={2} flexShrink={1} w=\"100%\">\r\n                                                                <HStack flexShrink={1} space={2} justifyContent=\"space-between\">\r\n                                                                    <HStack space={2} flexShrink={1}>\r\n                                                                        <Alert.Icon mt=\"1\" />\r\n                                                                        <Text fontSize=\"md\" color=\"coolGray.800\">\r\n                                                                            {i18next.t(\"room.wrongAnswer\")}\r\n                                                                        </Text>\r\n                                                                    </HStack>\r\n                                                                </HStack>\r\n                                                            </VStack>\r\n                                                        </Alert>\r\n                                                    )}\r\n                                                </Box>\r\n                                            )\r\n                                        })}\r\n                                        <Button colorScheme=\"secondary\" mt={20} style={{ alignSelf: 'center' }} onPress={restart}>{i18next.t(\"room.restartButton\")}</Button>\r\n                                        <Button mt={6} style={{ alignSelf: 'center' }} onPress={goBack}>{i18next.t(\"room.backDashboard\")}</Button>\r\n                                    </>\r\n                                )}\r\n                            </>\r\n                        ) :\r\n                            (<Text>Quiz disabled!</Text>)}\r\n                    </>\r\n                ) :\r\n                    roomExists === false ? (\r\n                        <>\r\n                            <Text fontSize={22}>This quiz doesn't exist =(</Text>\r\n                            <Button mt={4} onPress={goBack}>{i18next.t(\"room.backDashboard\")}</Button>\r\n                        </>) :\r\n                        <Spinner size=\"lg\" />\r\n                }\r\n            </ScrollView>\r\n        </>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, SimpleGrid, Input, ScaleFade, Spinner, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { UserData } from \"models\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { CardItem } from \"../shared\";\r\nimport { getMediaQuery } from \"../../styles\";\r\n\r\nexport const UserRooms = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n\r\n    useEffect(() => {\r\n        setUser(undefined)\r\n        checkIfLoggedIn({ navigation } as NativeStackHeaderProps,\r\n            (user) =>\r\n                getUserData(user.uid).then(user => { setUser(user); })\r\n        )\r\n\r\n    }, [isFocused]);\r\n\r\n\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 100, width: \"100%\"\r\n            }}>\r\n            {user ?(\r\n                <ScaleFade in={user !== undefined}>\r\n                    <Box>\r\n                    <Heading mb={3}>Library</Heading>\r\n                        {user.rooms && user.rooms.length > 0? (\r\n                            <SimpleGrid columns={isSmallMedium ? 1 : 3} spacingX={10} spacingY={5} alignItems=\"center\" mx={[10, 0]}>\r\n                                {user.rooms.map((room, key) => {\r\n                                    return (\r\n                                        <Box key={key} minWidth=\"200px\" mt={2}>\r\n                                            <CardItem room={Object.values(room)[0]} ownerId={user.id} />\r\n                                        </Box>\r\n                                    )\r\n                                })}\r\n                            </SimpleGrid>\r\n                        ):\r\n                        (<Text>User don't have quiz.</Text>) }\r\n                    </Box>\r\n\r\n                </ScaleFade>\r\n                ):\r\n            (<Spinner size=\"lg\" />)}\r\n        </ScrollView>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, SimpleGrid, Input, Spinner, Center, Flex, ScaleFade, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { UserData } from \"models\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport i18next from \"i18next\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport { CardItem } from \"../shared\";\r\n\r\ninterface UserName {\r\n    userName: string;\r\n}\r\n\r\nexport const Users = ({ route, navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [userLogged, setUserLogged] = useState<UserData | undefined>(undefined);\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [userExists, setUserExists] = useState<boolean | undefined>(undefined);\r\n\r\n    const getUserNameData = async (userName: string) => {\r\n        const docRef = doc(db, \"usernames\", userName)\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            getUserData(docSnap.data().id).then(user => setUser(user))\r\n            setUserExists(true)\r\n        }\r\n        else {\r\n            setUserExists(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUser(undefined);\r\n        setUserLogged(undefined);\r\n        setUserExists(undefined);\r\n        if (route.params) {\r\n            getUserNameData((route.params as UserName).userName)\r\n            checkIfLoggedIn({ navigation } as NativeStackHeaderProps,\r\n                (user) => getUserData(user.uid).then(user => { setUserLogged(user); }))\r\n        }\r\n        else {\r\n            setUserExists(false)\r\n        }\r\n    }, [isFocused]);\r\n\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1,\r\n               marginBottom: 80,\r\n                alignItems: isSmallMedium ? undefined : 'center'\r\n            }}>\r\n                 <Box mb=\"150\">\r\n                <Box bg=\"blue.600\" py={20} w={!isSmallMedium ? \"100vw\" : \"100%\"}\r\n                    style={{ alignSelf: !isSmallMedium ? 'center' : 'center' }} />\r\n                <Center\r\n                    position=\"absolute\"\r\n                    alignSelf=\"center\"\r\n                    top=\"50%\">\r\n                    <Box rounded=\"lg\"\r\n                        p={6}\r\n                        borderColor=\"coolGray.200\"\r\n                        borderWidth=\"1\"\r\n                        _dark={{\r\n                            borderColor: \"coolGray.600\",\r\n                            backgroundColor: \"gray.700\",\r\n                        }}\r\n                        _web={{\r\n                            shadow: 2,\r\n                            borderWidth: 0,\r\n                            cursor: \"default\"\r\n                        }}\r\n                        _light={{\r\n                            backgroundColor: \"gray.50\",\r\n                        }}>\r\n                        {user ? (\r\n                            <Flex alignItems=\"center\">\r\n                                <Avatar\r\n                                    size=\"xl\"\r\n                                    source={{\r\n                                        uri: user.photoUrl ?? ''\r\n                                    }}>\r\n                                    {user && user.name ? user.name.match(/\\b(\\w)/g)?.join('') : ''}\r\n                                </Avatar>\r\n                                <Text bold mt={1}>{user.name}</Text>\r\n                            </Flex>\r\n                        ) : userExists === false ? (\r\n                            <>\r\n                    <Text>User don't exist.</Text>\r\n                </>\r\n            ) :\r\n                <Spinner size=\"lg\" />}\r\n                    </Box>\r\n                </Center>\r\n            </Box>\r\n            {user ?(\r\n                <ScaleFade in={user !== undefined}>\r\n                    <Box>\r\n                    <Heading mb={3}>User quiz</Heading>\r\n                        {user.rooms && user.rooms.length > 0? (\r\n                            <SimpleGrid columns={isSmallMedium ? 1 : 3} spacingX={10} spacingY={5} alignItems=\"center\" mx={[10, 0]}  mb={20}>\r\n                                {user.rooms.map((room, key) => {\r\n                                    return (\r\n                                        <Box key={key} minWidth=\"200px\" mt={2}>\r\n                                            <CardItem room={Object.values(room)[0]} ownerId={user.id} />\r\n                                        </Box>\r\n                                    )\r\n                                })}\r\n                            </SimpleGrid>\r\n                        ):\r\n                        (<Text>User don't have quiz.</Text>) }\r\n                    </Box>\r\n\r\n                </ScaleFade>\r\n                ):\r\n            (<Spinner size=\"lg\" />)}           \r\n        </ScrollView>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, Input, Spinner, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { UserData } from \"models\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { deleteDoc, doc, getDoc, setDoc, updateDoc } from \"firebase/firestore\";\r\n\r\nexport const Settings = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [userName, setUserName] = useState('');\r\n\r\n    const [userNameAvailable, setUserNameAvailable] = useState<boolean | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        setUser(undefined)\r\n        checkIfLoggedIn({ navigation } as NativeStackHeaderProps,\r\n            (user) =>\r\n                getUserData(user.uid).then(user => { setUser(user); })\r\n        )\r\n\r\n    }, [isFocused]);\r\n\r\n    useEffect(() => {\r\n        if (userName.length > 0) {\r\n            checkUserName()\r\n        }\r\n        else {\r\n            setUserNameAvailable(undefined)\r\n        }\r\n    }, [userName]);\r\n\r\n\r\n\r\n    const checkUserName = async () => {\r\n        if (user) {\r\n            setUserNameAvailable(undefined)\r\n            const username = userName.toLowerCase();\r\n            const docRef = doc(db, \"usernames\", username);\r\n            const docSnap = await getDoc(docRef);\r\n            if (docSnap.exists()) {\r\n                setUserNameAvailable(false)\r\n            }\r\n            else {\r\n                setUserNameAvailable(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateUserName = async () => {\r\n        if (user) {\r\n            const refUsers = doc(db, \"users\", user.id);\r\n            const oldUserName = user.userName;\r\n\r\n            await updateDoc(refUsers, {\r\n                userName: userName\r\n            })\r\n                .then(async () =>\r\n                    await deleteDoc(doc(db, \"usernames\", oldUserName)).then(async () =>\r\n                        await setDoc(doc(db, \"usernames\", userName), { id: user.id })).then(() => navigation.navigate('Home')));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1,\r\n                justifyContent: 'center', alignItems: 'center', marginVertical: 10\r\n            }}>\r\n            {user ? (\r\n                <>\r\n                    <Heading mb={8}>Settings</Heading>\r\n                    <Text bold mt={1}>Current username: {user.userName}</Text>\r\n                    <Input minWidth=\"250px\" mt={4} value={userName} onChangeText={setUserName} />\r\n                    {userName.length > 2 && (\r\n                        <Text bold>{userNameAvailable === true ? `${userName} is available` : userNameAvailable === false ? `${userName} is not available` : '...'}</Text>\r\n                    )}\r\n                    <Button mt={4} isDisabled={userName.length <= 2 || !userNameAvailable} onPress={() => updateUserName()}>Change username</Button>\r\n                    <Button mt={4} style={{ alignSelf: 'center' }} onPress={() => navigation.navigate('Users', { userName: user.userName })}>View profile</Button>\r\n                </>\r\n            ) :\r\n                <Spinner size=\"lg\" />}\r\n        </ScrollView>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, SimpleGrid, Input, ScaleFade, Spinner, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { RoomData, UserData } from \"models\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { CardItem } from \"../shared\";\r\nimport { collection, getDocs, limit, query, where } from \"firebase/firestore\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport i18next from \"i18next\";\r\n\r\nexport const Explore = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [rooms, setRooms] = useState<RoomData[]>([]);\r\n    const auth = getAuth();\r\n\r\n    useEffect(() => {\r\n        setRooms([])\r\n        setUser(undefined)\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                getUserData(user.uid).then(user => { setUser(user) }).then(() => loadRoom())\r\n            } else {\r\n            navigation.navigate('Login')\r\n            }\r\n          });\r\n        \r\n    }, [isFocused, auth]);\r\n\r\n    const loadRoom = async () => {        \r\n        const ref = collection(db, \"rooms\");\r\n        const q = query(ref, where(\"privacy\", \"==\", \"public\"));\r\n        const querySnapshot = await getDocs(q);\r\n        const tempRoom: RoomData[] = []\r\n\r\n        querySnapshot.forEach((doc) => {\r\n            tempRoom.push(doc.data() as RoomData)\r\n            });\r\n            \r\n        setRooms(tempRoom)\r\n    }\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n    \r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 80\r\n            }}>\r\n            {user ? (\r\n                <ScaleFade in={user !== undefined}>\r\n                    <Box>\r\n                        {rooms && rooms.length > 0 && (\r\n                            <Box mt={10}>\r\n                            <Heading mb={3}>{i18next.t(\"explore.title\")}</Heading>\r\n                            <SimpleGrid columns={isSmallMedium ? 1 : 3} spacingX={10} spacingY={5} alignItems=\"center\" mx={[10, 0]} mb={200}>\r\n                                {rooms.map((room, key) => {\r\n                                    return (\r\n                                        <Box key={key} minWidth=\"200px\" mt={2}>\r\n                                          <CardItem room={room} ownerId={user.id} /> \r\n                                        </Box>\r\n                                    )\r\n                                })}\r\n                            </SimpleGrid>\r\n                            </Box>\r\n                        )}\r\n                    </Box>\r\n                </ScaleFade>\r\n            ) :\r\n                (<Spinner size=\"lg\" />)}\r\n        </ScrollView>\r\n    );\r\n}","import { NativeStackHeaderProps } from '@react-navigation/native-stack';\r\nimport { Button, ScrollView, Text } from 'native-base';\r\nimport React from 'react';\r\n\r\nexport default function NotFoundScreen({ navigation }: NativeStackHeaderProps) {\r\n  return (\r\n    <ScrollView\r\n      contentContainerStyle={{\r\n        flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 80\r\n      }}>\r\n      <Text bold fontSize={[40, 100]}>404</Text>\r\n      <Text bold fontSize={[20, 40]}>Page not found =(</Text>\r\n      <Button variant=\"default\" mt={10} onPress={() => navigation.navigate('Home')}>\r\n        Back to Home!\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n}","import { useIsFocused, useNavigation } from \"@react-navigation/native\";\r\nimport { child, getDatabase, push, ref, set } from \"firebase/database\";\r\nimport { Box, Button, Divider, Flex, Icon, IconButton, Input, Modal, Radio, ScrollView, Text, Tooltip, useTheme } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NavigationProp, ParamListBase } from '@react-navigation/native';\r\nimport { RoomData } from \"models\";\r\nimport { Entypo, AntDesign, Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { addDoc, arrayUnion, collection, doc, setDoc, updateDoc } from \"firebase/firestore\";\r\nimport i18next from \"i18next\";\r\n\r\nexport const CreateRoom: React.FC = () => {\r\n    const [roomName, setRoomName] = useState('');\r\n    const [questions, setQuestions] = useState([{\r\n        name: '',\r\n        a: '',\r\n        b: '',\r\n        c: '',\r\n        d: '',\r\n        correctOption: ''\r\n    }])\r\n    const [roomPrivacy, setRoomPrivacy] = useState<\"public\" | \"private\" | \"link\">(\"public\");\r\n    const disabled = questions.map(question => (question.name === '' || !question.a || !question.b || !question.c || !question.d || !question.correctOption))\r\n\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation();\r\n    const [user, setUser] = useState<{ id: string | undefined, userName: string | undefined,  name: string | null | undefined }>({\r\n        id: undefined,\r\n        userName: undefined,\r\n        name: undefined\r\n    });\r\n    const [showSettings, setShowSettings] = useState<boolean>(false);\r\n    const theme = useTheme();\r\n    const isFocused = useIsFocused();\r\n\r\n    useEffect(() => {\r\n        if (isFocused) {\r\n            setQuestions([{\r\n                name: '',\r\n                a: '',\r\n                b: '',\r\n                c: '',\r\n                d: '',\r\n                correctOption: ''\r\n            }]);\r\n            setUser({\r\n                id: undefined,\r\n                userName: undefined,\r\n                name: undefined\r\n            });\r\n            setRoomName('');\r\n            checkIfLoggedIn({ navigation } as NativeStackHeaderProps,\r\n                (user) => getUserData(user.uid).then(user2 => setUser({\r\n                    id: user.uid,\r\n                    userName: user2.userName,\r\n                    name: user.displayName\r\n                })))\r\n        }\r\n    }, [isFocused]);\r\n\r\n    const createRoom = async () => {\r\n        // const roomId = push(child(ref(db), path)).key;\r\n\r\n        if (user.id && user.name !== undefined) {\r\n            const docRef = await addDoc(collection(db, \"rooms\"), {});\r\n\r\n            const room: RoomData = {\r\n                id: docRef.id,\r\n                name: roomName,\r\n                owner: {\r\n                    id: user.id,\r\n                    userName: user.userName as string,\r\n                    name: user.name\r\n                },\r\n                created_at: new Date().toLocaleString(),\r\n                disabled: false,\r\n                privacy: roomPrivacy,\r\n                questions: questions\r\n            }\r\n            await setDoc(doc(db, \"rooms\", docRef.id), room);\r\n\r\n            await updateDoc(doc(db, `users`, user.id), { rooms: arrayUnion({ [docRef.id]: room }) })\r\n                .then(() => { navigation.navigate('Room', { roomId: docRef.id }); })\r\n\r\n        }\r\n    };\r\n\r\n    const onChangeInput = (newValue: string, input: 'name' | 'a' | 'b' | 'c' | 'd' | 'correctOption', index: number) => {\r\n        let values = [...questions];\r\n        values[index] = {\r\n            name: input === 'name' ? newValue : values[index].name,\r\n            a: input === 'a' ? newValue : values[index].a,\r\n            b: input === 'b' ? newValue : values[index].b,\r\n            c: input === 'c' ? newValue : values[index].c,\r\n            d: input === 'd' ? newValue : values[index].d,\r\n            correctOption: input === 'correctOption' ? newValue : values[index].correctOption\r\n        }\r\n        setQuestions(values)\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        let newQuestion = {\r\n            name: '',\r\n            a: '',\r\n            b: '',\r\n            c: '',\r\n            d: '',\r\n            correctOption: ''\r\n        }\r\n        setQuestions(oldQuestions => [...oldQuestions, newQuestion])\r\n    }\r\n\r\n    const removeQuestion = (index: number) => {\r\n        let values = [...questions];\r\n        values.splice(index, 1)\r\n        setQuestions(values)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ScrollView\r\n                contentContainerStyle={{\r\n                    flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 10\r\n                }}>\r\n                {user.id && (\r\n                    <>\r\n                        <Box px={[4, 0]} w={[\"100%\", \"\"]}>\r\n                            <Text bold fontSize={24} mt={5}>Quiz name:</Text>\r\n                            <Input mt={5} size=\"lg\" value={roomName} onChangeText={setRoomName} />\r\n                            <Flex flexDirection=\"row\" justifyContent=\"flex-end\">\r\n                                <Button my={5} variant=\"default\" style={{ alignSelf: 'center' }} leftIcon={<Icon as={MaterialCommunityIcons} name=\"cogs\" size=\"sm\" />}\r\n                                    onPress={() => setShowSettings(true)}>Settings\r\n                                </Button>\r\n                            </Flex>\r\n                            {questions.map((question, index) => (\r\n                                <Box key={index}>\r\n                                    {index > 0 && (\r\n                                        <Flex flexDirection=\"row\" justifyContent=\"flex-end\">\r\n                                            <Button mt={5} style={{ alignSelf: 'center' }} leftIcon={<Icon as={Ionicons} name=\"remove\" size=\"sm\" />} colorScheme=\"danger\" onPress={() => removeQuestion(index)}>{\"Remove question \" + (index + 1)}</Button>\r\n                                        </Flex>\r\n                                    )}\r\n                                    <Text bold fontSize={24} mt={2}>Question {(index + 1).toString()}:</Text>\r\n                                    <Input mt={5} size=\"lg\" value={questions[index].name} onChangeText={(text: string) => onChangeInput(text, 'name', index)} />\r\n                                    <Flex flexDirection={[\"row\", \"row\"]} justifyContent=\"center\" flexWrap=\"wrap\" mt={5}>\r\n                                        <Flex w=\"50%\"\r\n                                            mb={4}\r\n                                            pr={4}>\r\n                                            <Box bg=\"white\"\r\n                                                rounded=\"sm\"\r\n                                                overflow=\"hidden\"\r\n                                                borderColor=\"coolGray.200\"\r\n                                                borderWidth=\"1\"\r\n                                                py={4}\r\n                                                px={4}\r\n                                                justifyContent=\"center\"\r\n                                                _web={{\r\n                                                    shadow: 2,\r\n                                                    borderWidth: 0,\r\n                                                }}>\r\n                                                <Flex px={4} w=\"100%\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Flex w=\"100%\" >\r\n                                                        <Input variant=\"unstyled\" size=\"lg\" value={questions[index].a} placeholder=\"Option A\" onChangeText={(text: string) => onChangeInput(text, 'a', index)} />\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <IconButton\r\n                                                            onPress={() => onChangeInput(\"a\", 'correctOption', index)}\r\n                                                            icon={<Icon as={AntDesign} name=\"checkcircle\" />}\r\n                                                            borderRadius=\"full\"\r\n                                                            _icon={{\r\n                                                                color: question.correctOption === \"a\" ? \"green.600\" : \"coolGray.700\",\r\n                                                                size: \"sm\",\r\n                                                            }}\r\n                                                            _hover={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.600\",\r\n                                                            }}\r\n                                                            _pressed={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.800\",\r\n                                                            }}\r\n                                                        />\r\n                                                    </Flex>\r\n                                                </Flex>\r\n                                            </Box>\r\n                                        </Flex>\r\n                                        <Flex w=\"50%\"\r\n                                            mb={4}>\r\n                                            <Box bg=\"white\"\r\n                                                rounded=\"sm\"\r\n                                                overflow=\"hidden\"\r\n                                                borderColor=\"coolGray.200\"\r\n                                                borderWidth=\"1\"\r\n                                                py={4}\r\n                                                px={4}\r\n                                                justifyContent=\"center\"\r\n                                                _web={{\r\n                                                    shadow: 2,\r\n                                                    borderWidth: 0,\r\n                                                }}>\r\n                                                <Flex px={4} w=\"100%\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Flex w=\"100%\" >\r\n                                                        <Input variant=\"unstyled\" size=\"lg\" value={questions[index].b} placeholder=\"Option B\" onChangeText={(text: string) => onChangeInput(text, 'b', index)} />\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <IconButton\r\n                                                            onPress={() => onChangeInput(\"b\", 'correctOption', index)}\r\n                                                            icon={<Icon as={AntDesign} name=\"checkcircle\" />}\r\n                                                            borderRadius=\"full\"\r\n                                                            _icon={{\r\n                                                                color: questions[index].correctOption === \"b\" ? \"green.600\" : \"coolGray.700\",\r\n                                                                size: \"sm\",\r\n                                                            }}\r\n                                                            _hover={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.600\",\r\n                                                            }}\r\n                                                            _pressed={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.800\",\r\n                                                            }}\r\n                                                        />\r\n                                                    </Flex>\r\n                                                </Flex>\r\n                                            </Box>\r\n                                        </Flex>\r\n                                        <Flex w=\"50%\"\r\n                                            pr={4}>\r\n                                            <Box bg=\"white\"\r\n                                                rounded=\"sm\"\r\n                                                overflow=\"hidden\"\r\n                                                borderColor=\"coolGray.200\"\r\n                                                borderWidth=\"1\"\r\n                                                py={4}\r\n                                                px={4}\r\n                                                justifyContent=\"center\"\r\n                                                _web={{\r\n                                                    shadow: 2,\r\n                                                    borderWidth: 0,\r\n                                                }}>\r\n                                                <Flex px={4} w=\"100%\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Flex w=\"100%\" >\r\n                                                        <Input variant=\"unstyled\" size=\"lg\" value={questions[index].c} placeholder=\"Option C\" onChangeText={(text: string) => onChangeInput(text, 'c', index)} />\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <IconButton\r\n                                                            onPress={() => onChangeInput(\"c\", 'correctOption', index)}\r\n                                                            icon={<Icon as={AntDesign} name=\"checkcircle\" />}\r\n                                                            borderRadius=\"full\"\r\n                                                            _icon={{\r\n                                                                color: questions[index].correctOption === \"c\" ? \"green.600\" : \"coolGray.700\",\r\n                                                                size: \"sm\",\r\n                                                            }}\r\n                                                            _hover={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.600\",\r\n                                                            }}\r\n                                                            _pressed={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.800\",\r\n                                                            }}\r\n                                                        />\r\n                                                    </Flex>\r\n                                                </Flex>\r\n                                            </Box>\r\n                                        </Flex>\r\n                                        <Flex w=\"50%\">\r\n                                            <Box bg=\"white\"\r\n                                                rounded=\"sm\"\r\n                                                overflow=\"hidden\"\r\n                                                borderColor=\"coolGray.200\"\r\n                                                borderWidth=\"1\"\r\n                                                py={4}\r\n                                                px={4}\r\n                                                justifyContent=\"center\"\r\n                                                _web={{\r\n                                                    shadow: 2,\r\n                                                    borderWidth: 0,\r\n                                                }}>\r\n                                                <Flex px={4} w=\"100%\" flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Flex w=\"100%\" >\r\n                                                        <Input variant=\"unstyled\" size=\"lg\" value={questions[index].d} placeholder=\"Option D\" onChangeText={(text: string) => onChangeInput(text, 'd', index)} />\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <IconButton\r\n                                                            onPress={() => onChangeInput(\"d\", 'correctOption', index)}\r\n                                                            icon={<Icon as={AntDesign} name=\"checkcircle\" />}\r\n                                                            borderRadius=\"full\"\r\n                                                            _icon={{\r\n                                                                color: questions[index].correctOption === \"d\" ? \"green.600\" : \"coolGray.700\",\r\n                                                                size: \"sm\",\r\n                                                            }}\r\n                                                            _hover={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.600\",\r\n                                                            }}\r\n                                                            _pressed={{\r\n                                                                bg: \"green.600:alpha.20\",\r\n                                                                color: \"blue.800\",\r\n                                                            }}\r\n                                                        />\r\n                                                    </Flex>\r\n                                                </Flex>\r\n                                            </Box>\r\n                                        </Flex>\r\n                                    </Flex>\r\n                                </Box>\r\n\r\n                            ))}\r\n                        </Box>\r\n                        <Button leftIcon={<Icon as={Ionicons} name=\"add-circle-outline\" size=\"sm\" />} onPress={addQuestion} mt={5}>Add question</Button>\r\n                        <Button isDisabled={disabled.some(it => it === true)} onPress={createRoom} mt={5}>Finish and create quiz!</Button>\r\n                        <Button mt={4} variant=\"outline\" onPress={() => navigation.navigate('Dashboard')}>{i18next.t(\"room.backDashboard\")}</Button>\r\n\r\n                        <Modal\r\n                            isOpen={showSettings}\r\n                            onClose={() => setShowSettings(false)}\r\n                            size=\"xl\">\r\n                            <Modal.Content>\r\n                                <Modal.CloseButton />\r\n                                <Modal.Header><Text variant=\"modalHeader\">Settings</Text></Modal.Header>\r\n                                <Modal.Body my={10}>\r\n                                    <Flex flexDirection=\"row\">\r\n                                        <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                                            <Text bold fontSize={[14, 18]}>Privacy\r\n\r\n                                            </Text>\r\n                                            <Box>\r\n                                                <Tooltip label=\"Public| Private | Link only\">\r\n                                                    <IconButton\r\n                                                        ml={1}\r\n                                                        p={0}\r\n                                                        icon={<Icon as={MaterialCommunityIcons} name=\"help-circle-outline\" />}\r\n                                                        _icon={{\r\n                                                            color: \"coolGray.700\",\r\n                                                            size: \"20px\",\r\n                                                        }}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </Box>\r\n                                        </Flex>\r\n\r\n                                        <Flex flexDirection=\"row\" justifyContent=\"center\">\r\n                                            <IconButton\r\n                                                ml={4}\r\n                                                mr={4}\r\n                                                icon={<Icon as={MaterialCommunityIcons} name=\"web\" />}\r\n                                                onPress={() => setRoomPrivacy(\"public\")}\r\n                                                borderRadius=\"full\"\r\n                                                bg={roomPrivacy === \"public\" ? \"green.600:alpha.20\" : undefined}\r\n                                                _icon={{\r\n                                                    color: roomPrivacy === \"public\" ? \"green.600\" : \"coolGray.700\",\r\n                                                    size: \"md\",\r\n                                                }}\r\n                                                _hover={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n                                                _pressed={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n\r\n                                            />\r\n                                            <IconButton\r\n                                                mr={4}\r\n                                                icon={<Icon as={MaterialCommunityIcons} name=\"lock\" />}\r\n                                                onPress={() => setRoomPrivacy(\"private\")}\r\n                                                borderRadius=\"full\"\r\n                                                bg={roomPrivacy === \"private\" ? \"green.600:alpha.20\" : undefined}\r\n                                                _icon={{\r\n                                                    color: roomPrivacy === \"private\" ? \"green.600\" : \"coolGray.700\",\r\n                                                    size: \"md\",\r\n                                                }}\r\n                                                _hover={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n                                                _pressed={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n\r\n                                            />\r\n                                            <IconButton\r\n                                                mr={4}\r\n                                                icon={<Icon as={MaterialCommunityIcons} name=\"link-lock\" />}\r\n                                                onPress={() => setRoomPrivacy(\"link\")}\r\n                                                borderRadius=\"full\"\r\n                                                bg={roomPrivacy === \"link\" ? \"green.600:alpha.20\" : undefined}\r\n                                                _icon={{\r\n                                                    color: roomPrivacy === \"link\" ? \"green.600\" : \"coolGray.700\",\r\n                                                    size: \"md\",\r\n                                                }}\r\n                                                _hover={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n                                                _pressed={{\r\n                                                    bg: \"green.600:alpha.20\",\r\n                                                }}\r\n\r\n                                            />\r\n                                        </Flex>\r\n                                    </Flex>\r\n\r\n\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button.Group space={2}>\r\n                                        <Button\r\n                                            variant=\"ghost\"\r\n                                            colorScheme=\"blueGray\"\r\n                                            onPress={() => {\r\n                                                setShowSettings(false)\r\n                                            }}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button\r\n                                            onPress={() => {\r\n                                                setShowSettings(false)\r\n                                            }}\r\n                                        >\r\n                                            Save\r\n                                        </Button>\r\n                                    </Button.Group>\r\n                                </Modal.Footer>\r\n                            </Modal.Content>\r\n                        </Modal>\r\n                    </>\r\n                )}\r\n            </ScrollView>\r\n        </>\r\n    );\r\n}","const tintColorLight = '#2f95dc';\r\nconst tintColorDark = '#fff';\r\n\r\nexport default {\r\n  light: {\r\n    text: '#000',\r\n    background: '#fff',\r\n    tint: tintColorLight,\r\n    tabIconDefault: '#ccc',\r\n    tabIconSelected: tintColorLight,\r\n  },\r\n  dark: {\r\n    text: '#fff',\r\n    background: '#000',\r\n    tint: tintColorDark,\r\n    tabIconDefault: '#ccc',\r\n    tabIconSelected: tintColorDark,\r\n  },\r\n};\r\n","/**\r\n * Learn more about Light and Dark modes:\r\n * https://docs.expo.io/guides/color-schemes/\r\n */\r\n\r\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const theme = useColorScheme();\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  } else {\r\n    return Colors[theme][colorName];\r\n  }\r\n}\r\n\r\ntype ThemeProps = {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n};\r\n\r\nexport type TextProps = ThemeProps & DefaultText['props'];\r\nexport type ViewProps = ThemeProps & DefaultView['props'];\r\n\r\nexport function Text(props: TextProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\r\n\r\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\r\n}\r\n\r\nexport function View(props: ViewProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\r\n\r\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n","import { Text, TextProps } from './Themed';\r\n\r\nexport function MonoText(props: TextProps) {\r\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\r\n}\r\n","import * as WebBrowser from 'expo-web-browser';\r\nimport { StyleSheet, TouchableOpacity } from 'react-native';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport { MonoText } from './StyledText';\r\nimport { Text, View } from './Themed';\r\n\r\nexport default function EditScreenInfo({ path }: { path: string }) {\r\n  return (\r\n    <View>\r\n      <View style={styles.getStartedContainer}>\r\n        <Text\r\n          style={styles.getStartedText}\r\n          lightColor=\"rgba(0,0,0,0.8)\"\r\n          darkColor=\"rgba(255,255,255,0.8)\">\r\n          Open up the code for this screen:\r\n        </Text>\r\n\r\n        <View\r\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\r\n          darkColor=\"rgba(255,255,255,0.05)\"\r\n          lightColor=\"rgba(0,0,0,0.05)\">\r\n          <MonoText>{path}</MonoText>\r\n        </View>\r\n\r\n        <Text\r\n          style={styles.getStartedText}\r\n          lightColor=\"rgba(0,0,0,0.8)\"\r\n          darkColor=\"rgba(255,255,255,0.8)\">\r\n          Change any of the text, save the file, and your app will automatically update.\r\n        </Text>\r\n      </View>\r\n\r\n      <View style={styles.helpContainer}>\r\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\r\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\r\n            Tap here if your app doesn't automatically update after making changes\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction handleHelpPress() {\r\n  WebBrowser.openBrowserAsync(\r\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  getStartedContainer: {\r\n    alignItems: 'center',\r\n    marginHorizontal: 50,\r\n  },\r\n  homeScreenFilename: {\r\n    marginVertical: 7,\r\n  },\r\n  codeHighlightContainer: {\r\n    borderRadius: 3,\r\n    paddingHorizontal: 4,\r\n  },\r\n  getStartedText: {\r\n    fontSize: 17,\r\n    lineHeight: 24,\r\n    textAlign: 'center',\r\n  },\r\n  helpContainer: {\r\n    marginTop: 15,\r\n    marginHorizontal: 20,\r\n    alignItems: 'center',\r\n  },\r\n  helpLink: {\r\n    paddingVertical: 15,\r\n  },\r\n  helpLinkText: {\r\n    textAlign: 'center',\r\n  },\r\n});\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { Platform, StyleSheet } from 'react-native';\r\n\r\nimport EditScreenInfo from '../../components/EditScreenInfo';\r\nimport { Text, View } from '../../components/Themed';\r\n\r\nexport default function ModalScreen() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Modal</Text>\r\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\r\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\r\n\r\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\r\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  separator: {\r\n    marginVertical: 30,\r\n    height: 1,\r\n    width: '80%',\r\n  },\r\n});\r\n","import { Box, Button, CheckIcon, Flex, Heading, Icon, Input, Select, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { collection, deleteDoc, doc, getDoc, getDocs, setDoc } from \"firebase/firestore\";\r\nimport { db, getIconType } from \"services\";\r\nimport { Category, IconType } from \"models\";\r\n\r\nexport const CategoryAdmin = () => {\r\n    const [category, setCategory] = useState('');\r\n    const [translation_en, setTranslation_en] = useState('');\r\n    const [translation_pt, setTranslation_pt] = useState('');\r\n    const [icon, setIcon] = useState('');\r\n    const [iconType, setIconType] = useState<IconType | undefined>(undefined);\r\n    const [categoryList, setCategoryList] = useState<Category[] | undefined>(undefined);\r\n    const validIconType = [\"MaterialCommunityIcons\", \"MaterialIcons\", \"AntDesign\", \"Entypo\", \"Ionicons\", \"Ionicons\", \"Foundation\", \"FontAwesome\", \"FontAwesome5\"];\r\n\r\n    useEffect(() => {\r\n        loadCategories()\r\n    }, []);\r\n\r\n    const addCategory = async () => {\r\n        const docRef = doc(db, \"categories\", category);\r\n        const docSnap = await getDoc(docRef);\r\n\r\n        if (!docSnap.exists()) {\r\n            await setDoc(doc(db, \"categories\", category), {\r\n                name: category,\r\n                translation_en: translation_en,\r\n                translation_pt: translation_pt,\r\n                icon: icon,\r\n                iconType: iconType\r\n            } as Category).then(() => {\r\n                setCategory('');\r\n                setTranslation_en('');\r\n                setTranslation_pt('');\r\n                setIcon('');\r\n                setIconType(undefined);\r\n                loadCategories();\r\n            })\r\n        }\r\n        else {\r\n            alert('já existe')\r\n        }\r\n    }\r\n\r\n    const loadCategories = async () => {\r\n        const querySnapshot = await getDocs(collection(db, \"categories\"));\r\n        const tempCategories: Category[] = []\r\n        querySnapshot.forEach((doc) => {\r\n            tempCategories.push(doc.data() as Category)\r\n        });\r\n        setCategoryList(tempCategories)\r\n    }\r\n\r\n    const removeCategory = async (name: string) => {\r\n        await deleteDoc(doc(db, \"categories\", name)).then(() => loadCategories())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Input variant=\"unstyled\" size=\"lg\" value={category} placeholder=\"Category Name*\" onChangeText={setCategory} />\r\n            <Input variant=\"unstyled\" size=\"lg\" value={translation_en} mt={4} placeholder=\"Translation English\" onChangeText={setTranslation_en} />\r\n            <Input variant=\"unstyled\" size=\"lg\" value={translation_pt} mt={4} placeholder=\"Translation Portuguese\" onChangeText={setTranslation_pt} />\r\n            <Input variant=\"unstyled\" size=\"lg\" value={icon} mt={4} placeholder=\"Category Icon\" onChangeText={setIcon} />\r\n            <Select\r\n                selectedValue={iconType as string}\r\n                minWidth=\"200\"\r\n                accessibilityLabel=\"Choose Icon Type\"\r\n                placeholder=\"Choose Icon Type\"\r\n                bg=\"white\"\r\n                color=\"black\"\r\n                mt={4}\r\n                onValueChange={(itemValue) => setIconType(itemValue as IconType)}\r\n            >\r\n                {validIconType.map(iconType => (<Select.Item label={iconType} value={iconType} />))}\r\n\r\n            </Select>\r\n            {iconType && icon && getIconType(iconType) !== undefined && (\r\n                <Icon\r\n                    as={getIconType(iconType)}\r\n                    name={icon}\r\n                    color=\"coolGray.800\"\r\n                    _dark={{\r\n                        color: \"warmGray.50\",\r\n                    }}\r\n                />\r\n            )}\r\n            <Button mt={4} isDisabled={!category} onPress={() => addCategory()}>Add Category</Button>\r\n            {categoryList && categoryList.length > 0 && (\r\n                <>\r\n                    <Heading mt={10} bold>Categorias</Heading>\r\n                    <Box mb={10} rounded=\"lg\"\r\n                        p={6}\r\n                        borderColor=\"coolGray.200\"\r\n                        borderWidth=\"1\"\r\n                        _dark={{\r\n                            borderColor: \"coolGray.600\",\r\n                            backgroundColor: \"gray.700\",\r\n                        }}\r\n                        _web={{\r\n                            shadow: 2,\r\n                            borderWidth: 0,\r\n                            cursor: \"default\"\r\n                        }}\r\n                        _light={{\r\n                            backgroundColor: \"gray.50\",\r\n                        }}>\r\n                        {categoryList.map(category => (\r\n                        <Flex flexDirection=\"row\" alignItems=\"center\">\r\n                            <Icon\r\n                                as={getIconType(category.iconType)}\r\n                                name={category.icon}\r\n                                color=\"coolGray.800\"\r\n                                _dark={{\r\n                                    color: \"warmGray.50\",\r\n                                }}\r\n                            />\r\n                            <Text pl={4} fontSize={16} bold>{category.name}</Text>\r\n                            <Flex flexDirection=\"row\" justifyContent=\"flex-end\" pl={4}>\r\n                            <Button onPress={() => removeCategory(category.name)}>Remove</Button>\r\n                            </Flex>\r\n                            </Flex>))}\r\n                    </Box>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { getUserData } from \"services\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { Trans } from \"react-i18next\";\r\nimport { UserData } from \"models\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport i18next from \"i18next\";\r\nimport { CategoryAdmin } from \"./Category\";\r\n\r\nexport const AdminHome = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [isAdmin, setIsAdmin] = useState<boolean | undefined>(undefined);\r\n    const auth = getAuth();\r\n\r\n    useEffect(() => {\r\n        setUser(undefined)\r\n        setIsAdmin(undefined)\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                getUserData(user.uid).then(user => { setUser(user) })\r\n            } else {\r\n                navigation.navigate('Login')\r\n            }\r\n        });\r\n\r\n    }, [isFocused, auth]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            if (user?.admin === true) {\r\n                setIsAdmin(true)\r\n            }\r\n            else {\r\n                navigation.navigate('Home')\r\n            }\r\n        }\r\n    }, [user]);\r\n\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                alignItems: isSmallMedium ? undefined : 'center'\r\n            }}>\r\n            {user && isAdmin && (\r\n                <>\r\n                    <Text>Oi adm</Text>\r\n                    <Box alignSelf=\"center\">\r\n                        <CategoryAdmin />\r\n                    </Box>\r\n                </>\r\n            )}\r\n        </ScrollView>\r\n    );\r\n}","import { Box, Button, Text, ScrollView, Flex, Spinner, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NavigationProp, ParamListBase, useIsFocused, useNavigation } from \"@react-navigation/native\";\r\nimport { db } from \"services\";\r\nimport { Trans } from \"react-i18next\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport i18next from \"i18next\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { Feather } from \"@expo/vector-icons\";\r\n\r\nexport const WordRoom = () => {\r\n\r\n    const navigation: NavigationProp<ParamListBase> = useNavigation();\r\n\r\n    interface Word {\r\n        word: string;\r\n        color?: string;\r\n        type?: \"correct\" | \"present\" | \"absent\"\r\n    }\r\n\r\n    const isFocused = useIsFocused();\r\n    const [posX, setPosX] = useState(0);\r\n    const [posY, setPosY] = useState(0);\r\n    const defaultWords = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n    const defaultWords1 = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n    const defaultWords2 = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n    const defaultWords3 = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n    const defaultWords4 = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n    const defaultWords5 = [{ word: '' }, { word: '' }, { word: '' }, { word: '' }, { word: '' }];\r\n\r\n    const [words, setWords] = useState<Word[][]>([defaultWords, defaultWords1, defaultWords2, defaultWords3, defaultWords4, defaultWords5]);\r\n    const [isFinished, setFinished] = useState(false);\r\n    const [isCorrect, setIsCorrect] = useState<boolean | undefined>(undefined);\r\n    const [userCorrectPos, setUserCorrectPos] = useState<number | undefined>(undefined);\r\n    const [usedLetters, setUsedLetters] = useState<string[]>([]);\r\n    const [currentWord, setCurrentWord] = useState<string[] | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        loadWord();\r\n    }, [isFocused]);\r\n\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n    const correctColor = \"#3AA394\"\r\n    const presentColor = \"#D3AD69\"\r\n    const absentColor = \"#312A2C\";\r\n\r\n    const loadWord = async () => {\r\n        const docRef = doc(db, \"word\", \"word\");\r\n        const docSnap = await getDoc(docRef);\r\n\r\n        if (docSnap.exists()) {\r\n            setCurrentWord(docSnap.data().word)\r\n        } else {\r\n            navigation.navigate('Home')\r\n        }\r\n    }\r\n\r\n    const submitWord = () => {\r\n        if (currentWord) {\r\n            if (words[posY].some(it => it.word === '')) {\r\n                alert('Preencha os campos!')\r\n            }\r\n            else {\r\n                let wordsValues = [...[...words]];\r\n                let letters = [...usedLetters];\r\n\r\n                let isPresent = false;\r\n                const checkLetters = () => {\r\n                for (var i = 0; i < 5; i++) {\r\n                    isPresent = false;\r\n                    if (wordsValues[posY][i].word.toLowerCase() === currentWord[i]) {\r\n                        wordsValues[posY][i].color = correctColor;\r\n                        wordsValues[posY][i].type = \"correct\";\r\n                        if (!letters.includes(wordsValues[posY][i].word.toLowerCase())) {\r\n                            letters.push(wordsValues[posY][i].word.toLowerCase())\r\n                        }\r\n                        continue;\r\n                    }\r\n\r\n                    for (var j = 0; j < 5; j++) {\r\n                        if (wordsValues[posY][i].word.toLowerCase() === currentWord[j] && wordsValues[posY][j].color !== \"#3AA394\") {\r\n                            wordsValues[posY][i].color = presentColor;\r\n                            wordsValues[posY][i].type = \"present\";\r\n                            if (!letters.includes(wordsValues[posY][i].word.toLowerCase())) {\r\n                                letters.push(wordsValues[posY][i].word.toLowerCase())\r\n                            }\r\n                            isPresent = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (isPresent == false) {\r\n                        wordsValues[posY][i].color = absentColor;\r\n                        wordsValues[posY][i].type = \"absent\";\r\n                        if (!letters.includes(wordsValues[posY][i].word.toLowerCase())) {\r\n                            letters.push(wordsValues[posY][i].word.toLowerCase())\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                checkLetters();\r\n                setUsedLetters(letters)\r\n\r\n                //if is all correct\r\n                if ((wordsValues[posY].map((it, index) => it.word.toLowerCase() === currentWord[index].toLowerCase()).every(e => e === true))) {\r\n                    setFinished(true)\r\n                    setUserCorrectPos(posY + 1)\r\n                    setIsCorrect(true)\r\n                }\r\n\r\n                if (posY < 5) {\r\n                    setPosY(posY + 1)\r\n                    setPosX(0)\r\n                }\r\n                else {\r\n                    setFinished(true)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    const onChangeWord = (index: number, index2: number, text: string, force?: boolean) => {\r\n        if (posX !== 5 || force) {\r\n            let values = [...[...words]];\r\n            values[index][index2].word = text\r\n            setWords(values);\r\n        }\r\n    }\r\n\r\n    const Key = (props: any) => {\r\n        const keyVal = props.value.toLowerCase();\r\n\r\n        const setKey = () => {\r\n            if (props.value.toLowerCase() === \"enter\") {\r\n                submitWord();\r\n            }\r\n            else if (props.value.toLowerCase() === \"delete\") {\r\n                if (posX !== 0) {\r\n                    if (posX === 5) {\r\n                        onChangeWord(posY, 4, '', true)\r\n                        setPosX(posX - 1)\r\n                    }\r\n                    else {\r\n                        onChangeWord(posY, posX - 1, '')\r\n                        setPosX(posX - 1)\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                onChangeWord(posY, posX, props.value.toLowerCase())\r\n                if (posX <= 4) {\r\n                    setPosX(posX + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        const getKeyBg = () => {\r\n            if (usedLetters.some(it => it === props.value.toLowerCase())) {\r\n                for (var i = 0; i < 5; i++) {\r\n                    for (var j = 0; j < 5; j++) {\r\n                        if (words[i][j].word.toLowerCase() === keyVal) {\r\n                            if (words[i][j].type === \"correct\") {\r\n                                return correctColor\r\n                            }\r\n                            else if (words[i][j].type === \"present\") {\r\n                                return presentColor\r\n                            }\r\n                            else if (words[i][j].type === \"absent\") {\r\n                                return absentColor\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Button\r\n                mr={2}\r\n                width={(keyVal === \"enter\" || keyVal === \"delete\") ? undefined : isSmallMedium ? \"28px\" : \"57\"}\r\n                height={isSmallMedium ? \"40px\" : \"70\"}\r\n                borderRadius={5}\r\n                style={{ backgroundColor: getKeyBg() ?? \"#4c4347\" }}\r\n                onPress={() => setKey()} px={[2, 4]} py={2} variant=\"unstyled\">\r\n                {keyVal !== \"delete\" ? (\r\n                    <Text selectable={false} fontSize={[16, 30]} bold color=\"white\">{props.value}</Text>\r\n                ) : (\r\n                    <Feather selectable={false} name=\"delete\" size={isSmallMedium ? 12 : 30} color=\"white\" />\r\n                )}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1,\r\n                justifyContent: 'center',\r\n                alignItems: isSmallMedium ? undefined : 'center',\r\n                backgroundColor: \"#6E5C62\"\r\n            }}>\r\n            {currentWord ? (\r\n                !isFinished ? (\r\n                    <>\r\n                        <Heading color=\"white\" mb={10}>Word Beat</Heading>\r\n                        {words.map((val, index) => (\r\n                            <Flex flexDirection=\"row\" justifyContent=\"center\" key={'e' + index}>\r\n                                {val.map((val2, index2) => (\r\n                                    <Box mr={3} key={index2} mb={4}>\r\n                                        <Box\r\n                                            style={{\r\n                                                borderRadius: 5,\r\n                                                borderColor: words[index][index2].color ?? (posY !== index ? \"#615458\" : (posY === index && posX === index2) ? \"#332d30\" : \"#4C4347\"), borderWidth: 5,\r\n                                                backgroundColor: words[index][index2].color ?? (posY !== index ? \"#615458\" : \"#6E5C62\")\r\n                                            }}\r\n                                            w={[\"50px\", \"75px\"]} h={[\"50px\", \"75px\"]} >\r\n                                            <Text m=\"auto\" pt={1} color={\"white\"} bold style={{ textTransform: \"uppercase\", fontSize: isSmallMedium ? 15 : 40, textAlign: \"center\" }}>{words[index][index2].word}</Text>\r\n                                        </Box>\r\n                                    </Box>\r\n                                ))}\r\n                            </Flex>\r\n                        ))}\r\n\r\n                        {/* KEYBOARD */}\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" mt={4} mb={4}>\r\n                            <Key value=\"Q\" />\r\n                            <Key value=\"W\" />\r\n                            <Key value=\"E\" />\r\n                            <Key value=\"R\" />\r\n                            <Key value=\"T\" />\r\n                            <Key value=\"Y\" />\r\n                            <Key value=\"U\" />\r\n                            <Key value=\"I\" />\r\n                            <Key value=\"O\" />\r\n                            <Key value=\"P\" />\r\n                        </Flex>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" mb={4}>\r\n                            <Key value=\"A\" />\r\n                            <Key value=\"S\" />\r\n                            <Key value=\"D\" />\r\n                            <Key value=\"F\" />\r\n                            <Key value=\"G\" />\r\n                            <Key value=\"H\" />\r\n                            <Key value=\"J\" />\r\n                            <Key value=\"K\" />\r\n                            <Key value=\"L\" />\r\n                            <Key value=\"DELETE\" />\r\n                        </Flex>\r\n                        <Flex flexDirection=\"row\" justifyContent=\"center\" mb={4}>\r\n                            <Key value=\"Z\" />\r\n                            <Key value=\"X\" />\r\n                            <Key value=\"C\" />\r\n                            <Key value=\"V\" />\r\n                            <Key value=\"B\" />\r\n                            <Key value=\"N\" />\r\n                            <Key value=\"M\" />\r\n                            <Key value=\"ENTER\" />\r\n                        </Flex>\r\n                    </>\r\n                ) : (\r\n                    (isCorrect) ? (\r\n                        <Text bold color={correctColor} fontSize={30}>Você acertou na tentativa {userCorrectPos}</Text>\r\n                    ) : (\r\n                        <Text bold color=\"red.700\" fontSize={30}>Você não acertou, a palavra certa era {currentWord.map(it => it)}</Text>\r\n                    )\r\n                )\r\n            ) : (\r\n                <Spinner size=\"lg\" />\r\n            )}\r\n        </ScrollView>\r\n    );\r\n}","import { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { Box, Button, Text, ScrollView, Avatar, SimpleGrid, Input, ScaleFade, Spinner, Heading } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { RoomData, UserData } from \"models\";\r\nimport { checkIfLoggedIn, db, getUserData } from \"services\";\r\nimport { CardItem } from \"../shared\";\r\nimport { collection, getDocs, limit, query, where } from \"firebase/firestore\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { getMediaQuery } from \"../../styles\";\r\nimport i18next from \"i18next\";\r\n\r\nexport const ReportsHome = ({ navigation }: NativeStackHeaderProps) => {\r\n    const isFocused = useIsFocused();\r\n    const [user, setUser] = useState<UserData | undefined>(undefined);\r\n    const [rooms, setRooms] = useState<RoomData[]>([]);\r\n    const auth = getAuth();\r\n\r\n    useEffect(() => {\r\n        setRooms([])\r\n        setUser(undefined)\r\n        onAuthStateChanged(auth, (user) => {\r\n            if (user) {\r\n                getUserData(user.uid).then(user => { setUser(user) }).then(() => loadRoom())\r\n            } else {\r\n            navigation.navigate('Login')\r\n            }\r\n          });\r\n        \r\n    }, [isFocused, auth]);\r\n\r\n    const loadRoom = async () => {        \r\n        const ref = collection(db, \"rooms\");\r\n        const q = query(ref, where(\"privacy\", \"==\", \"public\"));\r\n        const querySnapshot = await getDocs(q);\r\n        const tempRoom: RoomData[] = []\r\n\r\n        querySnapshot.forEach((doc) => {\r\n            tempRoom.push(doc.data() as RoomData)\r\n            });\r\n            \r\n        setRooms(tempRoom)\r\n    }\r\n    const isSmallMedium = getMediaQuery(\"isSmallMedium\");\r\n\r\n    \r\n    return (\r\n        <ScrollView\r\n            contentContainerStyle={{\r\n                flexGrow: 1, justifyContent: 'center', alignItems: 'center', marginVertical: 80\r\n            }}>\r\n            {user ? (\r\n                <ScaleFade in={user !== undefined}>\r\n                    <Box>\r\n                    <Text bold fontSize={30}>Coming soon</Text>\r\n                    </Box>\r\n                </ScaleFade>\r\n            ) :\r\n                (<Spinner size=\"lg\" />)}\r\n        </ScrollView>\r\n    );\r\n}","/**\r\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\r\n * https://reactnavigation.org/docs/getting-started\r\n *\r\n */\r\nimport { BottomTabBarProps, createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { NavigationContainer, DefaultTheme, DarkTheme, useRoute, useNavigation, ParamListBase, NavigationProp } from '@react-navigation/native';\r\nimport { createNativeStackNavigator, NativeStackHeaderProps } from '@react-navigation/native-stack';\r\nimport * as React from 'react';\r\nimport { ColorSchemeName, TouchableOpacity } from 'react-native';\r\nimport LinkingConfiguration from './LinkingConfiguration';\r\nimport { Dashboard, Explore, Home, LoginPage, Settings, Room, UserRooms, Users } from 'screens';\r\nimport 'react-native-gesture-handler';\r\nimport {\r\n  createDrawerNavigator,\r\n  DrawerContentScrollView,\r\n  DrawerItemList\r\n} from '@react-navigation/drawer';\r\nimport { Text, extendTheme, NativeBaseProvider, StorageManager, ColorMode, HamburgerIcon, Button, useColorModeValue, themeTools, View, Center, HStack, Spinner, Icon } from 'native-base';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useEffect } from 'react';\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\nimport { MaterialCommunityIcons, AntDesign, Entypo } from \"@expo/vector-icons\"\r\nimport { useFonts } from 'expo-font';\r\nimport { MenuOptions } from 'screens/shared';\r\nimport NotFoundScreen from 'screens/NotFoundScreen';\r\nimport { CreateRoom } from 'screens/Rooms/CreateRoom';\r\nimport ModalScreen from 'screens/ModalScreen';\r\nimport { RootStackParamList } from '../../types';\r\nimport { AdminHome } from '../screens/Admin/AdminHome';\r\nimport { WordRoom } from '../screens/Rooms/WordRoom';\r\nimport { ReportsHome } from '../screens/Reports/ReportsHome';\r\n\r\n\r\n\r\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\r\n\r\n  const auth = getAuth();\r\n  const [load, setLoad] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoad(false)\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        setLoad(true)\r\n\r\n      } else {\r\n        // navigation.navigate('Login');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const [loaded] = useFonts({\r\n    Amiko: require('../assets/fonts/Amiko-Regular.ttf'),\r\n  });\r\n\r\n  if (!loaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <NativeBaseProvider theme={theme} colorModeManager={colorModeManager}>\r\n      <NavigationContainer\r\n        linking={LinkingConfiguration}\r\n        theme={colorScheme === 'dark' ? themeNavigationDefault : themeNavigationDefault}>\r\n\r\n        <Tab.Navigator\r\n          initialRouteName='Home'\r\n          tabBar={props =>  <TabBar {...props} /> }\r\n          screenOptions={({ navigation, route }) => ({\r\n            tabBarHideOnKeyboard: true,\r\n            headerStyle: { backgroundColor: useColorModeValue(\"white\", \"black\"), borderBottomWidth: 0, shadow: \"rgb(0 0 0 / 10%) 0px 2px 4px 0px\" },\r\n            headerTitleStyle: {\r\n              color: useColorModeValue(theme.colors.coolGray[600], 'white'),\r\n              fontWeight: \"bold\",\r\n              fontFamily: 'Amiko'\r\n            },\r\n            headerTitle: \"Tinzzio\",\r\n            // headerLeft: () => <NavigationDrawerStructure navigation={navigation} />,\r\n            headerRight: () => <MenuOptions {...{ navigation } as NativeStackHeaderProps} />\r\n          })}\r\n        >\r\n          <Stack.Screen name=\"Home\" component={Home} />\r\n          <Tab.Screen name=\"Dashboard\" component={Dashboard} />\r\n          <Tab.Screen name=\"CreateRoom\" options={{ title: 'Create Quiz' }} component={CreateRoom} />\r\n          <Tab.Screen name=\"Explore\" component={Explore} />\r\n          <Tab.Screen name=\"Reports\" options={{ title: 'Reports' }} component={ReportsHome} />\r\n          <Stack.Screen options={{ headerShown: false }} name=\"Login\" component={LoginPage} />\r\n          <Stack.Screen name=\"Room\" component={Room} />\r\n          <Stack.Screen name=\"UserRooms\" options={{ title: 'Library' }} component={UserRooms} />\r\n          <Stack.Screen name=\"Users\" component={Users} />\r\n          <Stack.Screen name=\"Settings\" component={Settings} />\r\n          <Stack.Screen name=\"Admin\" component={AdminHome} />\r\n          <Stack.Screen name=\"Word\" options={{headerShown: false}} component={WordRoom} />\r\n          <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Page Not Found' }} />\r\n          <Stack.Group screenOptions={{ presentation: 'modal' }}>\r\n            <Stack.Screen name=\"Modal\" component={ModalScreen} />\r\n          </Stack.Group>\r\n        </Tab.Navigator>\r\n\r\n      </NavigationContainer>\r\n    </NativeBaseProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nconst TabBar = ({ state, descriptors, navigation }: BottomTabBarProps) => {\r\nconst currentRoute = descriptors[state.routes[state.index].key].route.name;\r\n\r\n  return (\r\n    <>\r\n    {(currentRoute !== \"Login\" && currentRoute !== \"CreateRoom\" && currentRoute !== \"Word\") &&(\r\n    <View pt={2} pb={1} style={{\r\n      flexDirection: 'row', backgroundColor: \"white\", justifyContent: \"center\", alignItems: \"center\",\r\n      position: 'absolute',\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0\r\n    }}>\r\n      {state.routes.map((route, index) => {\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n              ? options.title\r\n              : route.name;\r\n\r\n        const isFocused = state.index === index;\r\n\r\n        const onPress = () => {\r\n\r\n          if (!isFocused) {\r\n            navigation.navigate(route.name);\r\n          }\r\n        };\r\n\r\n        const onLongPress = () => {\r\n          navigation.emit({\r\n            type: 'tabLongPress',\r\n            target: route.key,\r\n          });\r\n        };\r\n\r\n        return (\r\n          <>\r\n            {(route.name === \"Dashboard\" || route.name === \"UserRooms\" || route.name === \"Explore\" || route.name === \"Reports\") && (\r\n              <TouchableOpacity\r\n                accessibilityRole=\"button\"\r\n                accessibilityLabel={options.tabBarAccessibilityLabel}\r\n                testID={options.tabBarTestID}\r\n                onPress={onPress}\r\n                onLongPress={onLongPress}\r\n                style={{ flex: 1, alignItems: \"center\", opacity: isFocused ? 1 : 0.7 }}\r\n                key={index}\r\n              >\r\n                {route.name === \"Dashboard\" && (\r\n                    <Icon\r\n                      as={AntDesign}\r\n                      name=\"home\"\r\n                      color={isFocused ? \"purple.600\" : theme.colors.coolGray[800]}\r\n                      size=\"28px\"\r\n                    />\r\n                )}\r\n                {route.name === \"Explore\" && (\r\n                    <Icon\r\n                      as={AntDesign}\r\n                      name=\"find\"\r\n                      color={isFocused ? \"purple.600\" : theme.colors.coolGray[800]}\r\n                      size=\"28px\"\r\n                    />\r\n                )}\r\n                 {route.name === \"Reports\" && (\r\n                    <Icon\r\n                      as={AntDesign}\r\n                      name=\"barschart\"\r\n                      color={isFocused ? \"purple.600\" : theme.colors.coolGray[800]}\r\n                      size=\"28px\"\r\n                    />\r\n                )}\r\n                {route.name === \"UserRooms\" && (\r\n                    <Icon\r\n                      as={AntDesign}\r\n                      name=\"book\"\r\n                      color={isFocused ? \"purple.600\" : theme.colors.coolGray[800]}\r\n                      size=\"28px\"\r\n                    />\r\n                )}\r\n                <Text pt={1} bold fontSize={12} style={{ color: isFocused ? theme.colors.purple[600] : theme.colors.coolGray[800] }}>\r\n                  {label === \"Dashboard\" ? \"Home\" : \r\n                  label === \"UserRooms\" ? \"Library\" :\r\n                  label}\r\n                </Text>\r\n              </TouchableOpacity>)}\r\n          </>\r\n        );\r\n      })\r\n      }\r\n    </View>\r\n    )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst NavigationDrawerStructure = ({ navigation }: any) => {\r\n\r\n  const toggleDrawer = () => {\r\n    navigation.toggleDrawer();\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity onPress={() => toggleDrawer()}>\r\n      <HamburgerIcon color=\"purple.700\" size={7} ml={2} />\r\n    </TouchableOpacity>\r\n  );\r\n};\r\nexport const theme = extendTheme({\r\n  fonts: {\r\n    heading: 'Amiko',\r\n    body: 'Amiko',\r\n    mono: 'Amiko',\r\n  },\r\n  components: {\r\n    Button: {\r\n      // Can simply pass default props to change default behaviour of components.\r\n      variants: {\r\n        default: ({ colorScheme }: any) => {\r\n          return {\r\n            rounded: 'md',\r\n            bg: \"purple.600\",\r\n            py: \"12px\",\r\n            _hover: { bg: \"purple.700\" },\r\n            _focus: { bg: \"purple.800\" },\r\n            _pressed: { bg: \"purple.800\" },\r\n            borderRadius: 8,\r\n            _text: {\r\n              color: \"white\"\r\n            }\r\n          };\r\n        },\r\n      },\r\n      baseStyle: {\r\n        variant: \"default\",\r\n        _text: { fontWeight: \"bold\" }\r\n      },\r\n    },\r\n    ScrollView: {\r\n      baseStyle: (props: any) => {\r\n        return {\r\n          background: themeTools.mode('#F2F2F2', 'black')(props),\r\n        };\r\n      },\r\n    },\r\n    Icon:{\r\n      baseStyle: () => {\r\n        return {\r\n          selectable: false,\r\n        };\r\n      }\r\n    },\r\n    Input: {\r\n      defaultProps: {\r\n        background: \"white\",\r\n        _focus: {\r\n          borderColor: \"purple.700\",\r\n          bg: \"white\"\r\n        },\r\n        _hover: {\r\n          borderColor: \"purple.700\",\r\n          bg: \"white\"\r\n        },\r\n        _pressed: {\r\n          borderColor: \"purple.700\",\r\n          bg: \"white\"\r\n        }\r\n      }\r\n    },\r\n    Text: {\r\n      variants:{\r\n        modalHeader: ({ colorMode }: any) => {\r\n          return {\r\n          fontWeight: \"bold\",\r\n          fontSize: 20,\r\n          color: colorMode === 'dark' ? 'white' : \"#565656\"\r\n          }\r\n        }\r\n      },\r\n      baseStyle: ({ colorMode }: any) => {\r\n        return {\r\n          color: colorMode === 'dark' ? 'white' : '#6E6E6E',\r\n          fontWeight: 'normal',\r\n        };\r\n      },\r\n    },\r\n    MenuItem: {\r\n      baseStyle: ({ colorMode }: any) => {\r\n        return {\r\n          background: colorMode === 'dark' ? undefined : 'white',\r\n          justifyContent: \"flex-start\",\r\n          alignItems: \"flex-start\",\r\n          _hover: {\r\n            background: \"gray.200\",\r\n          }\r\n        };\r\n      },\r\n    },\r\n    Menu: {\r\n      baseStyle: ({ colorMode }: any) => {\r\n        return {\r\n        mr: [2, 5],\r\n        py: 0\r\n        };\r\n      },\r\n    }\r\n  },\r\n  colors: {\r\n    // Add new color\r\n    black: \"#151515\",\r\n    light: \"#151515\",\r\n    // gray: \"#F2F2F2\",\r\n    primary: {\r\n      50: '#E3F2F9',\r\n      100: '#C5E4F3',\r\n      200: '#A2D4EC',\r\n      300: '#7AC1E4',\r\n      400: '#47A9DA',\r\n      500: '#0088CC',\r\n      600: '#007AB8',\r\n      700: '#006BA1',\r\n      800: '#005885',\r\n      900: '#003F5E',\r\n    },\r\n    purple: {\r\n      500: \"#9454EE\",\r\n      600: \"#8338EC\", //main\r\n      700: '#7030CA', //hover\r\n      800: \"#5D28A8\"\r\n\r\n    },\r\n  },\r\n  // config: {\r\n  //   // Changing initialColorMode to 'dark'\r\n  //   useSystemColorMode: true,\r\n\r\n  //   initialColorMode: 'dark',\r\n  // },\r\n});\r\n\r\nconst colorModeManager: StorageManager = {\r\n  get: async () => {\r\n    try {\r\n      let val = await AsyncStorage.getItem('@color-mode')\r\n      return val === 'dark' ? 'dark' : 'light';\r\n    } catch (e) {\r\n      return 'light';\r\n    }\r\n  },\r\n  set: async (value: ColorMode) => {\r\n    try {\r\n      await AsyncStorage.setItem('@color-mode', value as string);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  },\r\n};\r\n\r\nconst themeNavigationDark = {\r\n  ...DarkTheme,\r\n  colors: {\r\n    ...DarkTheme.colors,\r\n    background: theme.colors.black\r\n  },\r\n};\r\n\r\nconst themeNavigationDefault = {\r\n  ...DefaultTheme,\r\n  colors: {\r\n    ...DefaultTheme.colors,\r\n    background: theme.colors.white\r\n  },\r\n};\r\n\r\n/**\r\n * A root stack navigator is often used for displaying modals on top of all other content.\r\n * https://reactnavigation.org/docs/modal\r\n */\r\nconst Stack = createNativeStackNavigator<RootStackParamList | any>();\r\n\r\n\r\nfunction CustomDrawerContent(props: any) {\r\n  return (\r\n    <DrawerContentScrollView {...props}>\r\n      <DrawerItemList activeTintColor=\"#FFFFFF\" {...props} />\r\n    </DrawerContentScrollView>\r\n  );\r\n}\r\n\r\nconst Drawer = createDrawerNavigator();","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport * as Translations from \"./resources\";\r\nimport {NativeModules, Platform} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { SupportedLanguages } from \"./resources/supportedLanguages\";\r\n\r\nexport const cacheUserLanguage = (language: string) => {\r\n  AsyncStorage.setItem('language', language);\r\n}\r\n\r\nconst languageDetector = async () => {\r\n  const storedLanguage = await AsyncStorage.getItem('language');\r\n\r\n  if (storedLanguage) {\r\n    i18n.changeLanguage(storedLanguage);\r\n  }\r\n  else {\r\n    let phoneLanguage: string | null = null;\r\n    if (Platform.OS === 'android') {\r\n      phoneLanguage = NativeModules.I18Manager.localeIdentifier;\r\n    } else if (Platform.OS === \"ios\") {\r\n      phoneLanguage = NativeModules.SettingsManager.settings.AppleLocale;\r\n    }\r\n    else if (Platform.OS === \"web\") {\r\n      phoneLanguage = navigator.language;\r\n    }\r\n    if(phoneLanguage){\r\n      phoneLanguage = phoneLanguage.replace('_', '').replace('-', '');\r\n    }\r\n    if(phoneLanguage === \"enUS\"){\r\n      phoneLanguage = \"en\";\r\n    }\r\n    i18n.changeLanguage(phoneLanguage?? \"en\")\r\n    .then(() => cacheUserLanguage(phoneLanguage?? \"en\"))\r\n  };\r\n}\r\n\r\nlanguageDetector();\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources: {\r\n      en: {\r\n        translations: Translations.EN\r\n      },\r\n      ptBR: {\r\n        translations: Translations.PTBR\r\n      }\r\n    },\r\n    fallbackLng: \"en\",\r\n    debug: false,\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\",\r\n    compatibilityJSON: 'v3',\r\n    interpolation: {\r\n      escapeValue: false\r\n    }\r\n  });\r\n\r\n  export default i18n;\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\r\nimport useCachedResources from './hooks/useCachedResources';\r\nimport useColorScheme from './hooks/useColorScheme';\r\nimport Navigation from './src/navigation';\r\nimport \"./i18n/i18n\";\r\n\r\nexport default function App() {\r\n  const isLoadingComplete = useCachedResources();\r\n  const colorScheme = useColorScheme();\r\n  if (!isLoadingComplete) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <SafeAreaProvider>\r\n        <Navigation  colorScheme={colorScheme} />\r\n        <StatusBar />\r\n      </SafeAreaProvider>\r\n    );\r\n  }\r\n}\r\n","import { FontAwesome } from '@expo/vector-icons';\r\nimport * as Font from 'expo-font';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function useCachedResources() {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHideAsync();\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...FontAwesome.font,\r\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hideAsync();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  return isLoadingComplete;\r\n}\r\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Amiko-Regular.ttf\";"],"sourceRoot":""}